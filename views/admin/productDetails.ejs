<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link rel="stylesheet" href="/css/productDetails.css">
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-100 font-sans">
    <div class="flex min-h-screen">
        <!-- Sidebar Partial -->
        <%- include("../partials/admin/sidebar.ejs") %>

            <!-- Main Content -->
            <main class="main-content flex-1 p-6 md:ml-64">
                <h1 class="text-2xl font-bold mb-6">Product Details</h1>
                <form class="bg-white p-6 rounded-lg shadow-md" enctype="multipart/form-data"
                    action="<%= product._id ? `/admin/products/${product._id}?_method=PUT` : '/products' %>"
                    method="POST">
                    <div class="form-grid">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Product Name</label>
                            <input type="text" id="name" name="name" required class="mt-1 block w-full custom-input"
                                value="<%= product.name || '' %>">
                        </div>
                        <div>
                            <label for="modelNumber" class="block text-sm font-medium text-gray-700">Model
                                Number</label>
                            <input type="text" id="modelNumber" name="modelNumber" required
                                class="mt-1 block w-full custom-input" value="<%= product.modelNumber || '' %>">
                        </div>
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                            <select id="category" name="category" required class="mt-1 block w-full custom-select">
                                <option value="" <%=!product || !product.category ? 'selected' : '' %>>Select Category
                                </option>
                                <% categories.forEach(category=> { %>
                                    <option value="<%= category._id %>" <%=product && product.category===category._id
                                        ? 'selected' : '' %>><%= category._id %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                        <div>
                            <label for="color" class="block text-sm font-medium text-gray-700">Color</label>
                            <input type="text" id="color" name="color" required class="mt-1 block w-full custom-input"
                                value="<%= product.color || '' %>">
                        </div>
                        <div class="col-span-2">
                            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                            <textarea id="description" name="description" required
                                class="mt-1 block w-full custom-textarea"
                                rows="4"><%= product.description || '' %></textarea>
                        </div>
                        <div>
                            <label for="brand" class="block text-sm font-medium text-gray-700">Brand</label>
                            <input type="text" id="brand" name="brand" required class="mt-1 block w-full custom-input"
                                value="<%= product.brand || '' %>">
                        </div>
                        <div>
                            <label for="CPU" class="block text-sm font-medium text-gray-700">CPU</label>
                            <input type="text" id="CPU" name="CPU" required class="mt-1 block w-full custom-input"
                                value="<%= product.CPU || '' %>">
                        </div>
                        <div>
                            <label for="os" class="block text-sm font-medium text-gray-700">OS</label>
                            <input type="text" id="os" name="os" class="mt-1 block w-full custom-input"
                                value="<%= product.OS || '' %>">
                        </div>
                        <div>
                            <label for="screen" class="block text-sm font-medium text-gray-700">Screen</label>
                            <input type="text" id="screen" name="screen" required class="mt-1 block w-full custom-input"
                                value="<%= product.screen || '' %>">
                        </div>
                        <div>
                            <label for="graphics" class="block text-sm font-medium text-gray-700">Graphics</label>
                            <input type="text" id="graphics" name="graphics" required
                                class="mt-1 block w-full custom-input" value="<%= product.graphics || '' %>">
                        </div>
                        <div>
                            <label for="offer" class="block text-sm font-medium text-gray-700">Offer (%)</label>
                            <input type="number" id="offer" name="offer" class="mt-1 block w-full custom-input"
                                value="<%= product.offer || '' %>">
                        </div>
                        <div>
                            <label for="rating" class="block text-sm font-medium text-gray-700">Rating</label>
                            <input type="number" id="rating" name="rating" required
                                class="mt-1 block w-full custom-input" step="0.1" min="0" max="5"
                                value="<%= product.rating || '' %>">
                        </div>
                        <div>
                            <label for="count" class="block text-sm font-medium text-gray-700">Stock Count</label>
                            <input type="number" id="count" name="count" required class="mt-1 block w-full custom-input"
                                value="<%= product.count || '' %>">
                        </div>
                        <div>
                            <label for="regularPrice" class="block text-sm font-medium text-gray-700">Regular
                                Price</label>
                            <input type="number" id="regularPrice" name="regularPrice" required
                                class="mt-1 block w-full custom-input" value="<%= product.regularPrice || '' %>">
                        </div>
                        <div>
                            <label for="salePrice" class="block text-sm font-medium text-gray-700">Sale Price</label>
                            <input type="number" id="salePrice" name="salePrice" required
                                class="mt-1 block w-full custom-input" value="<%= product.salePrice || '' %>">
                        </div>
                        <div>
                            <label for="warranty" class="block text-sm font-medium text-gray-700">Warranty</label>
                            <input type="text" id="warranty" name="warranty" required
                                class="mt-1 block w-full custom-input" value="<%= product.warranty || '' %>">
                        </div>
                        <div>
                            <label for="webcam" class="block text-sm font-medium text-gray-700">Webcam</label>
                            <input type="text" id="webcam" name="webcam" class="mt-1 block w-full custom-input"
                                value="<%= product.webcam || '' %>">
                        </div>
                    </div>

                    <!-- Variants Section -->
                    <fieldset class="nested-fieldset mt-6">
                        <legend>Variants</legend>
                        <div id="variants-container" class="space-y-4">
                            <% (product.variants?.length ? product.variants : [{}]).forEach((variant, index)=> { %>
                                <div class="variant form-grid" data-index="<%= index %>">
                                    <div>
                                        <label>RAM</label>
                                        <input type="text" name="variants[<%= index %>][RAM]"
                                            value="<%= variant.RAM || '' %>" required class="custom-input">
                                    </div>
                                    <div>
                                        <label>Storage</label>
                                        <input type="text" name="variants[<%= index %>][Storage]"
                                            value="<%= variant.Storage || '' %>" required class="custom-input">
                                    </div>
                                    <div>
                                        <label>Price Adjustment</label>
                                        <input type="number" name="variants[<%= index %>][priceAdjustment]"
                                            value="<%= variant.priceAdjustment || '' %>" class="custom-input">
                                    </div>
                                    <div class="flex items-end">
                                        <button type="button"
                                            class="remove-variant bg-red-600 text-white px-2 py-1 rounded-md hidden">Remove</button>
                                    </div>
                                </div>
                                <% }) %>
                        </div>
                        <button type="button" id="add-variant"
                            class="mt-4 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Add
                            Variant</button>
                    </fieldset>

                    <!-- Ports Section -->
                    <fieldset class="nested-fieldset mt-6">
                        <legend>Ports</legend>
                       <% if(product.ports?.length ){ %>
                            
                       
                        <div class="form-grid">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">USB Type-A</label>
                                <input type="text" name="ports[0][USB Type-A]" class="mt-1 block w-full custom-input" value="<%=product.ports[0]['USB Type-A'] %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">USB Type-C</label>
                                <input type="text" name="ports[0][USB Type-C]" class="mt-1 block w-full custom-input " value="<%= product.ports[0]['USB Type-C'] %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">HDMI</label>
                                <input type="text" name="ports[0][HDMI]" class="mt-1 block w-full custom-input" value="<%= product.ports[0]['HDMI'] %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Audio Jack</label>
                                <input type="text" name="ports[0][AudioJack]" class="mt-1 block w-full custom-input" value="<%= product.ports[0]['AudioJack'] %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">LAN</label>
                                <input type="text" name="ports[0][LAN]" class="mt-1 block w-full custom-input" value="<%= product.ports[0]['LAN'] %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Card Reader</label>
                                <input type="text" name="ports[0][Card Reader]"
                                    class="mt-1 block w-full custom-input" value="<%= product.ports[0]['Card Reader'] %>">
                            </div>
                        </div>
                       <% } %>
                    </fieldset>

                    <!-- Images Section -->
                    <fieldset class="nested-fieldset mt-6">
                        <legend class="font-semibold text-gray-700">Product Images</legend>
                        <div class="form-grid">
                            <!-- Main Photo -->
                            <div class="image-container">
                                <h2 class="text-lg font-medium mb-4">Main Photo</h2>
                                <input type="hidden" name="productId" value="<%= product._id || '' %>">
                                <input type="file" id="main-file" name="images[0].file" accept="image/*"
                                    class="hidden custom-file">
                                <div class="main-photo" id="main-drop" data-index="0">
                                    <svg class="placeholder-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                        </path>
                                    </svg>
                                    <p class="text-sm text-gray-600 mt-2 <%= product.images?.[0]?.url ? 'hidden' : '' %>">Drag and drop or click to add image</p>
                                    <button type="button" class="custom-button mt-4 add-image-button <%= product.images?.[0]?.url ? 'hidden' : '' %>" data-input-id="main-file">Add Image</button>
                                    <img id="main-preview"
                                        class="image-preview  <%= product.images?.[0]?.url ? '' : 'hidden' %>"
                                        alt="Main Photo Preview" src="<%= product.images[0]?.url || '' %>">
                                        <button type="button" class="delete-image <%= product.images?.[0]?.url ? '' : 'hidden' %>">✕</button>
                                </div>
                                <input type="hidden" name="images[0].isMain" id="hidden-isMain-0" value="true">
                                <input type="hidden" name="images[0].url" id="existing-image-0"
                                    value="<%= product.images?.[0]?.url || '' %>">
                            </div>

                            <!-- Additional Photos -->
                            <div class="image-container">
                                <h2 class="text-lg font-medium mb-4">Additional Photos</h2>
                                <div class="photo-grid">
                                    <% for (let i=1; i <=4; i++) { %>
                                        <div>
                                            <input type="file" id="additional-file-<%= i %>"
                                                name="images[<%= i %>].file" accept="image/*"
                                                class="hidden custom-file">
                                            <div class="additional-photo" id="additional-drop-<%= i %>"
                                                data-index="<%= i %>">
                                                <svg class="placeholder-icon" fill="none" stroke="currentColor"
                                                    viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                    </path>
                                                </svg>
                                                <p class="text-sm text-gray-600 mt-2 <%= product.images?.[i]?.url ? 'hidden' : '' %>">Drag and drop, or click to add image</p>
                                                <button type="button" class="custom-button mt-4 add-image-button <%= product.images?.[i]?.url ? 'hidden' : '' %>" data-input-id="additional-file-<%= i %>">Add Image</button>                                                
                                                <img id="additional-preview-<%= i %>"
                                                    class="image-preview  <%= product.images?.[i]?.url ? '' : 'hidden' %>"
                                                    alt="Additional Photo <%= i %> Preview"
                                                    src="<%= product.images[i]?.url || '' %>">
                                                    <button type="button" id="additional-delete-<%= i %>" class=" delete-image <%= product.images?.[i]?.url ? '' : 'hidden' %>">✕</button>
                                            </div>
                                            <input type="hidden" name="images[<%= i %>].isMain"
                                                id="hidden-isMain-<%= i %>" value="false">
                                            <input type="hidden" name="images[<%= i %>].url"
                                                id="existing-image-<%= i %>"
                                                value="<%= product.images?.[i]?.url || '' %>">
                                        </div>
                                        <% } %>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <!-- Show in Shopping Page Checkbox -->
                    <div class="mt-6">
                        <label for="isActive" class="inline-flex items-center text-sm font-medium text-gray-700">
                            <input type="checkbox" id="isActive" name="isActive" <%=product.isActive !==false
                                ? 'checked' : '' %> class="mr-2 custom-checkbox">
                            Show in Shopping Page
                        </label>
                    </div>

                    <!-- Submit and Cancel Buttons -->
                    <div class="mt-6 flex space-x-4">
                        <button type="submit"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Update</button>
                        <button type="button" onclick="window.location.href='/admin/products'"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Cancel</button>
                    </div>
                </form>
            </main>
    </div>
    <div id="cropModal">
        <div class="cropper-container">
            <div class="cropper-image-wrapper">
                <img id="cropImage" alt="Image to crop"> 
            </div>
            <div class="cropper-buttons">
                <button class="btn btn-blue text-sm px-4 py2" id="cropConfirm">Crop & Save</button>
                <button class="btn btn-red text-sm px-4 py2" id="cropCancel">Cancel</button>
            </div>
        </div>
    </div>
    


    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>

       // Variant Management
       let variantIndex = 1;
        function updateRemoveButtons() {
            const variants = document.querySelectorAll('.variant');
            const removeButtons = document.querySelectorAll('.remove-variant');
            removeButtons.forEach(button => button.classList.toggle('hidden', variants.length <= 1));
        }

        document.getElementById('add-variant').addEventListener('click', () => {
            const container = document.getElementById('variants-container');
            const newVariant = document.createElement('div');
            newVariant.className = 'variant form-grid';
            newVariant.dataset.index = variantIndex;
            newVariant.innerHTML = `
                <div>
                    <label for="variant-ram-${variantIndex}" class="block text-sm font-medium text-gray-700">RAM</label>
                    <input type="text" id="variant-ram-${variantIndex}" name="variants[${variantIndex}][RAM]" class="mt-1 block w-full custom-input" required aria-describedby="variant-ram-${variantIndex}-error">
                    <p id="variant-ram-${variantIndex}-error" data-error="variants[${variantIndex}][RAM]" class="text-red-500 text-xs italic hidden"></p>
                </div>
                <div>
                    <label for="variant-storage-${variantIndex}" class="block text-sm font-medium text-gray-700">Storage</label>
                    <input type="text" id="variant-storage-${variantIndex}" name="variants[${variantIndex}][Storage]" class="mt-1 block w-full custom-input" required aria-describedby="variant-storage-${variantIndex}-error">
                    <p id="variant-storage-${variantIndex}-error" data-error="variants[${variantIndex}][Storage]" class="text-red-500 text-xs italic hidden"></p>
                </div>
                <div>
                    <label for="variant-priceAdjustment-${variantIndex}" class="block text-sm font-medium text-gray-700">Price Adjustment</label>
                    <input type="number" id="variant-priceAdjustment-${variantIndex}" name="variants[${variantIndex}][priceAdjustment]" class="mt-1 block w-full custom-input" step="0.01" aria-describedby="variant-priceAdjustment-${variantIndex}-error">
                    <p id="variant-priceAdjustment-${variantIndex}-error" data-error="variants[${variantIndex}][priceAdjustment]" class="text-red-500 text-xs italic hidden"></p>
                </div>
                <div class="flex items-end">
                    <button type="button" class="remove-variant inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" data-index="${variantIndex}" aria-label="Remove variant">Remove</button>
                </div>
            `;
            container.appendChild(newVariant);
            variantIndex++;
            updateRemoveButtons();

            newVariant.querySelector('.remove-variant').addEventListener('click', () => {
                newVariant.remove();
                const remainingVariants = document.querySelectorAll('.variant');
                remainingVariants.forEach((variant, idx) => {
                    variant.dataset.index = idx;
                    const inputs = variant.querySelectorAll('input');
                    inputs[0].id = `variant-ram-${idx}`;
                    inputs[0].name = `variants[${idx}][RAM]`;
                    inputs[0].setAttribute('aria-describedby', `variant-ram-${idx}-error`);
                    inputs[1].id = `variant-storage-${idx}`;
                    inputs[1].name = `variants[${idx}][Storage]`;
                    inputs[1].setAttribute('aria-describedby', `variant-storage-${idx}-error`);
                    inputs[2].id = `variant-priceAdjustment-${idx}`;
                    inputs[2].name = `variants[${idx}][priceAdjustment]`;
                    inputs[2].setAttribute('aria-describedby', `variant-priceAdjustment-${idx}-error`);
                    const errorEls = variant.querySelectorAll('p[data-error]');
                    errorEls[0].id = `variant-ram-${idx}-error`;
                    errorEls[0].dataset.error = `variants[${idx}][RAM]`;
                    errorEls[1].id = `variant-storage-${idx}-error`;
                    errorEls[1].dataset.error = `variants[${idx}][Storage]`;
                    errorEls[2].id = `variant-priceAdjustment-${idx}-error`;
                    errorEls[2].dataset.error = `variants[${idx}][priceAdjustment]`;
                    const removeButton = variant.querySelector('.remove-variant');
                    if (removeButton) removeButton.dataset.index = idx;
                });
                variantIndex = remainingVariants.length;
                updateRemoveButtons();
            });
        });

        // Image Drag-and-Drop and Cropping
        let cropper = null;
        let currentFileInput = null;
        let currentPreview = null;
        let currentText = null;
        let currentAddButton = null;
        let currentDeleteButton = null;

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('input[type="file"]').forEach(input => input.value = '');
            const cropModal = document.getElementById('cropModal');
            

            updateRemoveButtons();
        });

        function setupDragAndDrop(dropArea, fileInput, preview, deleteButton) {
            const text = dropArea.querySelector('p');
            const buttons = dropArea.querySelectorAll('button');
            const addButton = dropArea.querySelector('.add-image-button')


            dropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropArea.classList.add('drag-active');
            });

            dropArea.addEventListener('dragenter', (e) => {
                e.preventDefault();
                dropArea.classList.add('drag-active');
            });

            dropArea.addEventListener('dragleave', () => {
                dropArea.classList.remove('drag-active');
            });

            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                dropArea.classList.remove('drag-active');
                const files = e.dataTransfer.files;
                if (files.length > 0 && files[0].type.startsWith('image/')) {
                    fileInput.files = files;
                    handleImage(files[0], fileInput, preview, text, addButton, deleteButton);
                } else {
                    showError(fileInput.name, 'Please upload an image file.');
                }
            });

            dropArea.addEventListener('click', () => fileInput.click());

            fileInput.addEventListener('change', () => {
                const file = fileInput.files[0];
                if (file && file.type.startsWith('image/')) {
                    if (file.size > 5 * 1024 * 1024) {
                        showError(fileInput.name, 'Image size must be less than 5MB.');
                        fileInput.value = '';
                    } else {
                        handleImage(file, fileInput, preview, text, addButton, deleteButton);
                    }
                } else {
                    showError(fileInput.name, 'Please upload an image file.');
                    clearImage(preview, text, addButton, fileInput, deleteButton);
                }
            });

            deleteButton.addEventListener('click', (e) => {
                e.stopPropagation();
                clearImage(preview, text, addButton, fileInput, deleteButton);
            });
        }

        function handleImage(file, fileInput, preview, text, addButton, deleteButton) {
            currentFileInput = fileInput;
            currentPreview = preview;
            currentText = text;
            currentAddButton = addButton;
            currentDeleteButton = deleteButton;

            const reader = new FileReader();
            reader.onload = (e) => {
                const cropImage = document.getElementById('cropImage');
                cropImage.onload = () => {
                
                document.getElementById('cropModal').style.display = 'flex';

                if (cropper) cropper.destroy();
                const isMainPhoto = preview.closest('.main-photo');
                cropper = new Cropper(cropImage, {
                    aspectRatio: isMainPhoto ? 400 / 300 : 150 / 150,
                    viewMode: 1,
                    autoCropArea: 1,
                });
            }
            cropImage.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        document.getElementById('cropConfirm').addEventListener('click', () => {
    if (!cropper) return;

    const isMainPhoto = currentPreview.closest('.main-photo');
    const croppedCanvas = cropper.getCroppedCanvas({
        width: isMainPhoto ? 400 : 150,
        height: isMainPhoto ? 300 : 150,
    });

    currentPreview.src = croppedCanvas.toDataURL('image/jpeg');
    currentPreview.classList.remove('hidden');
    currentText.classList.add('hidden');
    currentAddButton.classList.add('hidden');
    currentDeleteButton.classList.remove('hidden');

    croppedCanvas.toBlob((blob) => {
        const file = new File([blob], 'cropped.jpg', { type: 'image/jpeg' });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        currentFileInput.files = dataTransfer.files;
    });

    document.getElementById('cropModal').style.display = 'none';
    cropper.destroy();
    cropper = null;
});


        function clearImage(preview, text, addButton, fileInput, deleteButton) {
            preview.src = '';
            preview.classList.add('hidden');
            text.classList.remove('hidden');
            addButton.classList.remove('hidden');
            deleteButton.classList.add('hidden');
            fileInput.value = '';
            clearError(fileInput.name);
        }

        function showError(fieldName, message) {
            const errorEl = document.querySelector(`p[data-error="${fieldName}"]`);
            if (errorEl) {
                errorEl.textContent = message;
                errorEl.classList.remove('hidden');
            }
        }

        function clearError(fieldName) {
            const errorEl = document.querySelector(`p[data-error="${fieldName}"]`);
            if (errorEl) {
                errorEl.textContent = '';
                errorEl.classList.add('hidden');
            }
        }

        

        document.querySelector('#cropModal .btn-red').addEventListener('click', () => {
            document.getElementById('cropModal').style.display = 'none';
            cropper.destroy();
            cropper = null;
            clearImage(currentPreview, currentText, currentAddButton, currentFileInput, currentDeleteButton);
        });

        // Setup for main photo
        setupDragAndDrop(
            document.getElementById('main-drop'),
            document.getElementById('main-file'),
            document.getElementById('main-preview'),
            document.querySelector('#main-drop .delete-image')
        );

        // Setup for additional photos
        for (let i = 1; i <= 4; i++) {
            setupDragAndDrop(
                document.getElementById(`additional-drop-${i}`),
                document.getElementById(`additional-file-${i}`),
                document.getElementById(`additional-preview-${i}`),
                document.getElementById(`additional-delete-${i}`)
            );
        }

        // Form Validation
        const form = document.getElementById('product-form');
        form.addEventListener('submit', (e) => {
            let hasError = false;
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            inputs.forEach(input => {
                if (!input.value.trim()) {
                    showError(input.name, `${input.name.replace(/\[.*\]/, '')} is required`);
                    hasError = true;
                } else {
                    clearError(input.name);
                }
            });

            const rating = document.getElementById('rating');
            if (rating.value && (rating.value < 0 || rating.value > 5)) {
                showError('rating', 'Rating must be between 0 and 5');
                hasError = true;
            }

            if (hasError) {
                e.preventDefault();
                alert('Please fill out all required fields correctly.');
            }
        });

        // Cancel Confirmation
        document.getElementById('cancel-button').addEventListener('click', () => {
            const form = document.getElementById('product-form');
            const inputs = form.querySelectorAll('input, select, textarea');
            const isDirty = Array.from(inputs).some(input => input.value || input.checked !== input.defaultChecked);
            if (isDirty && !confirm('Are you sure you want to cancel? Unsaved changes will be lost.')) {
                return;
            }
            window.location.href = '/admin/products';
        });

    </script>
</body>

</html>