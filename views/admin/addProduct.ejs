<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link rel="stylesheet" href="/css/productDetails.css">
    <link rel="stylesheet" href="/css/sidebar.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Ensure image containers are positioned relatively for absolute delete buttons */
        .image-container, .main-photo, .additional-photo {
            position: relative;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <div class="flex min-h-screen">
        <!-- Sidebar Partial -->
        <%- include("../partials/admin/sidebar.ejs") %>

        <!-- Main Content -->
        <main class="main-content flex-1 p-6 md:ml-64">
            <h1 class="text-2xl font-bold mb-6">Add New Product</h1>
            <form class="bg-white p-6 rounded-lg shadow-md" enctype="multipart/form-data" action="/products" method="POST">
                <div class="form-grid">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700">Product Name</label>
                        <input type="text" id="name" name="name" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="modelNumber" class="block text-sm font-medium text-gray-700">Model Number</label>
                        <input type="text" id="modelNumber" name="modelNumber" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                        <select id="category" name="category" required class="mt-1 block w-full custom-select">
                            <option value="" selected>Select Category</option>
                            <% categories.forEach(category => { %>
                                <option value="laptops"><%= category._id %></option>
                            <% }) %>
                        </select>
                    </div>
                    <div>
                        <label for="color" class="block text-sm font-medium text-gray-700">Color</label>
                        <input type="text" id="color" name="color" required class="mt-1 block w-full custom-input">
                    </div>
                    <div class="col-span-2">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea id="description" name="description" required class="mt-1 block w-full custom-textarea" rows="4"></textarea>
                    </div>
                    <div>
                        <label for="brand" class="block text-sm font-medium text-gray-700">Brand</label>
                        <input type="text" id="brand" name="brand" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="CPU" class="block text-sm font-medium text-gray-700">CPU</label>
                        <input type="text" id="CPU" name="CPU" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="os" class="block text-sm font-medium text-gray-700">OS</label>
                        <input type="text" id="os" name="os" class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="screen" class="block text-sm font-medium text-gray-700">Screen</label>
                        <input type="text" id="screen" name="screen" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="graphics" class="block text-sm font-medium text-gray-700">Graphics</label>
                        <input type="text" id="graphics" name="graphics" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="offer" class="block text-sm font-medium text-gray-700">Offer (%)</label>
                        <input type="number" id="offer" name="offer" class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="rating" class="block text-sm font-medium text-gray-700">Rating</label>
                        <input type="number" id="rating" name="rating" required class="mt-1 block w-full custom-input" step="0.1" min="0" max="5">
                    </div>
                    <div>
                        <label for="count" class="block text-sm font-medium text-gray-700">Stock Count</label>
                        <input type="number" id="count" name="count" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="regularPrice" class="block text-sm font-medium text-gray-700">Regular Price</label>
                        <input type="number" id="regularPrice" name="regularPrice" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="salePrice" class="block text-sm font-medium text-gray-700">Sale Price</label>
                        <input type="number" id="salePrice" name="salePrice" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="warranty" class="block text-sm font-medium text-gray-700">Warranty</label>
                        <input type="text" id="warranty" name="warranty" required class="mt-1 block w-full custom-input">
                    </div>
                    <div>
                        <label for="webcam" class="block text-sm font-medium text-gray-700">Webcam</label>
                        <input type="text" id="webcam" name="webcam" class="mt-1 block w-full custom-input">
                    </div>
                </div>

                <!-- Variants Section -->
                <fieldset class="nested-fieldset mt-6">
                    <legend>Variants</legend>
                    <div id="variants-container" class="space-y-4">
                        <div class="variant form-grid" data-index="0">
                            <div>
                                <label for="variant-ram-0" class="block text-sm font-medium text-gray-700">RAM</label>
                                <input type="text" id="variant-ram-0" name="variants[0].RAM" required class="mt-1 block w-full custom-input">
                            </div>
                            <div>
                                <label for="variant-storage-0" class="block text-sm font-medium text-gray-700">Storage</label>
                                <input type="text" id="variant-storage-0" name="variants[0].Storage" required class="mt-1 block w-full custom-input">
                            </div>
                            <div>
                                <label for="variant-priceAdjustment-0" class="block text-sm font-medium text-gray-700">Price Adjustment</label>
                                <input type="number" id="variant-priceAdjustment-0" name="variants[0].priceAdjustment" class="mt-1 block w-full custom-input">
                            </div>
                            <div class="flex items-end">
                                <button type="button" class="remove-variant inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 hidden" data-index="0">Remove</button>
                            </div>
                        </div>
                    </div>
                    <button type="button" id="add-variant" class="mt-4 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Add Variant</button>
                </fieldset>

                <!-- Ports Section -->
                <fieldset class="nested-fieldset mt-6">
                    <legend>Ports</legend>
                    <div id="ports-container" class="space-y-4"></div>
                    <button type="button" id="add-port" class="mt-4 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Add Port</button>
                </fieldset>

                <!-- Images Section -->
                <fieldset class="nested-fieldset mt-6">
                    <legend class="font-semibold text-gray-700">Product Images</legend>
                    <div class="form-grid">
                        <!-- Main Photo -->
                        <div class="image-container">
                            <h2 class="text-lg font-medium mb-4">Main Photo</h2>
                            <input type="file" id="main-file" name="images[0].file" accept="image/*" class="hidden custom-file">
                            <div class="main-photo" id="main-drop" data-index="0">
                                <svg class="placeholder-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                <p class="text-sm text-gray-600 mt-2">Drag and drop image here, or click add image</p>
                                <button type="button" class="custom-button mt-4">Add Image</button>
                                <img id="main-preview" class="image-preview hidden" alt="Main Photo Preview">
                                <button type="button" id="main-delete" class="delete-image hidden absolute top-1 right-1 bg-red-600 text-white p-2 rounded-full text-sm font-bold shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition">✖</button>
                            </div>
                            <input type="hidden" name="images[0].isMain" id="hidden-isMain-0" value="true">
                        </div>

                        <!-- Additional Photos -->
                        <div class="image-container">
                            <h2 class="text-lg font-medium mb-4">Additional Photos</h2>
                            <div class="photo-grid">
                                <div>
                                    <input type="file" id="additional-file-1" name="images[1].file" accept="image/*" class="hidden custom-file">
                                    <div class="additional-photo" id="additional-drop-1" data-index="1">
                                        <svg class="placeholder-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                        <p class="text-sm text-gray-600 mt-2">Drag and drop image here, or click add image</p>
                                        <button type="button" class="custom-button mt-4">Add Image</button>
                                        <img id="additional-preview-1" class="image-preview hidden" alt="Additional Photo 1 Preview">
                                        <button type="button" id="additional-delete-1" class="delete-image hidden absolute top-1 right-1 bg-red-600 text-white p-2 rounded-full text-sm font-bold shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition">✖</button>
                                    </div>
                                    <input type="hidden" name="images[1].isMain" id="hidden-isMain-1" value="false">
                                </div>
                                <div>
                                    <input type="file" id="additional-file-2" name="images[2].file" accept="image/*" class="hidden custom-file">
                                    <div class="additional-photo" id="additional-drop-2" data-index="2">
                                        <svg class="placeholder-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                        <p class="text-sm text-gray-600 mt-2">Drag and drop image here, or click add image</p>
                                        <button type="button" class="custom-button mt-4">Add Image</button>
                                        <img id="additional-preview-2" class="image-preview hidden" alt="Additional Photo 2 Preview">
                                        <button type="button" id="additional-delete-2" class="delete-image hidden absolute top-1 right-1 bg-red-600 text-white p-2 rounded-full text-sm font-bold shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition">✖</button>
                                    </div>
                                    <input type="hidden" name="images[2].isMain" id="hidden-isMain-2" value="false">
                                </div>
                                <div>
                                    <input type="file" id="additional-file-3" name="images[3].file" accept="image/*" class="hidden custom-file">
                                    <div class="additional-photo" id="additional-drop-3" data-index="3">
                                        <svg class="placeholder-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                        <p class="text-sm text-gray-600 mt-2">Drag and drop image here, or click add image</p>
                                        <button type="button" class="custom-button mt-4">Add Image</button>
                                        <img id="additional-preview-3" class="image-preview hidden" alt="Additional Photo 3 Preview">
                                        <button type="button" id="additional-delete-3" class="delete-image hidden absolute top-1 right-1 bg-red-600 text-white p-2 rounded-full text-sm font-bold shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition">✖</button>
                                    </div>
                                    <input type="hidden" name="images[3].isMain" id="hidden-isMain-3" value="false">
                                </div>
                                <div>
                                    <input type="file" id="additional-file-4" name="images[4].file" accept="image/*" class="hidden custom-file">
                                    <div class="additional-photo" id="additional-drop-4" data-index="4">
                                        <svg class="placeholder-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                        <p class="text-sm text-gray-600 mt-2">Drag and drop image here, or click add image</p>
                                        <button type="button" class="custom-button mt-4">Add Image</button>
                                        <img id="additional-preview-4" class="image-preview hidden" alt="Additional Photo 4 Preview">
                                        <button type="button" id="additional-delete-4" class="delete-image hidden absolute top-1 right-1 bg-red-600 text-white p-2 rounded-full text-sm font-bold shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition">✖</button>
                                    </div>
                                    <input type="hidden" name="images[4].isMain" id="hidden-isMain-4" value="false">
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <!-- Show in Shopping Page Checkbox -->
                <div class="mt-6">
                    <label for="isActive" class="inline-flex items-center text-sm font-medium text-gray-700">
                        <input type="checkbox" id="isActive" name="isActive" checked class="mr-2 custom-checkbox">
                        Show in Shopping Page
                    </label>
                </div>

                <!-- Submit and Cancel Buttons -->
                <div class="mt-6 flex space-x-4">
                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Add Product</button>
                    <button type="button" onclick="window.location.href='/admin/products'" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Cancel</button>
                </div>
            </form>
        </main>
    </div>

    <script>
        // Dynamic Variant Addition and Removal
        let variantIndex = 1;

        function updateRemoveButtons() {
            const variants = document.querySelectorAll('.variant');
            const removeButtons = document.querySelectorAll('.remove-variant');
            if (variants.length > 1) {
                removeButtons.forEach(button => button.classList.remove('hidden'));
            } else {
                removeButtons.forEach(button => button.classList.add('hidden'));
            }
        }

        document.getElementById('add-variant').addEventListener('click', () => {
            const container = document.getElementById('variants-container');
            const newVariant = document.createElement('div');
            newVariant.className = 'variant form-grid';
            newVariant.dataset.index = variantIndex;
            newVariant.innerHTML = `
                <div>
                    <label for="variant-ram-${variantIndex}" class="block text-sm font-medium text-gray-700">RAM</label>
                    <input type="text" id="variant-ram-${variantIndex}" name="variants[${variantIndex}].RAM" required class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="variant-storage-${variantIndex}" class="block text-sm font-medium text-gray-700">Storage</label>
                    <input type="text" id="variant-storage-${variantIndex}" name="variants[${variantIndex}].Storage" required class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="variant-priceAdjustment-${variantIndex}" class="block text-sm font-medium text-gray-700">Price Adjustment</label>
                    <input type="number" id="variant-priceAdjustment-${variantIndex}" name="variants[${variantIndex}].priceAdjustment" class="mt-1 block w-full custom-input">
                </div>
                <div class="flex items-end">
                    <button type="button" class="remove-variant inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" data-index="${variantIndex}">Remove</button>
                </div>
            `;
            container.appendChild(newVariant);
            variantIndex++;
            updateRemoveButtons();

            newVariant.querySelector('.remove-variant').addEventListener('click', () => {
                newVariant.remove();
                const remainingVariants = document.querySelectorAll('.variant');
                remainingVariants.forEach((variant, idx) => {
                    variant.dataset.index = idx;
                    const inputs = variant.querySelectorAll('input');
                    inputs[0].id = `variant-ram-${idx}`;
                    inputs[0].name = `variants[${idx}].RAM`;
                    inputs[1].id = `variant-storage-${idx}`;
                    inputs[1].name = `variants[${idx}].Storage`;
                    inputs[2].id = `variant-priceAdjustment-${idx}`;
                    inputs[2].name = `variants[${idx}].priceAdjustment`;
                    const removeButton = variant.querySelector('.remove-variant');
                    if (removeButton) {
                        removeButton.dataset.index = idx;
                    }
                });
                variantIndex = remainingVariants.length;
                updateRemoveButtons();
            });
        });

        // Dynamic Port Addition and Removal
        let portIndex = 0;

        document.getElementById('add-port').addEventListener('click', () => {
            const container = document.getElementById('ports-container');
            const newPort = document.createElement('div');
            newPort.className = 'port form-grid';
            newPort.dataset.index = portIndex;
            newPort.innerHTML = `
                <div>
                    <label for="port-usbTypeA-${portIndex}" class="block text-sm font-medium text-gray-700">USB Type-A</label>
                    <input type="text" id="port-usbTypeA-${portIndex}" name="ports[${portIndex}].USB Type-A" class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="port-usbTypeC-${portIndex}" class="block text-sm font-medium text-gray-700">USB Type-C</label>
                    <input type="text" id="port-usbTypeC-${portIndex}" name="ports[${portIndex}].USB Type-C" class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="port-hdmi-${portIndex}" class="block text-sm font-medium text-gray-700">HDMI</label>
                    <input type="text" id="port-hdmi-${portIndex}" name="ports[${portIndex}].HDMI" class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="port-audioJack-${portIndex}" class="block text-sm font-medium text-gray-700">Audio Jack</label>
                    <input type="text" id="port-audioJack-${portIndex}" name="ports[${portIndex}].AudioJack" class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="port-lan-${portIndex}" class="block text-sm font-medium text-gray-700">LAN</label>
                    <input type="text" id="port-lan-${portIndex}" name="ports[${portIndex}].LAN" class="mt-1 block w-full custom-input">
                </div>
                <div>
                    <label for="port-cardReader-${portIndex}" class="block text-sm font-medium text-gray-700">Card Reader</label>
                    <input type="text" id="port-cardReader-${portIndex}" name="ports[${portIndex}].Card Reader" class="mt-1 block w-full custom-input">
                </div>
                <div class="flex items-end">
                    <button type="button" class="remove-port inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Remove</button>
                </div>
            `;
            container.appendChild(newPort);
            portIndex++;

            newPort.querySelector('.remove-port').addEventListener('click', () => {
                newPort.remove();
                const remainingPorts = document.querySelectorAll('.port');
                remainingPorts.forEach((port, idx) => {
                    port.dataset.index = idx;
                    const inputs = port.querySelectorAll('input');
                    inputs.forEach(input => {
                        const name = input.name.replace(/\[\d+\]/, `[${idx}]`);
                        const id = input.id.replace(/-\d+$/, `-${idx}`);
                        input.name = name;
                        input.id = id;
                    });
                });
                portIndex = remainingPorts.length;
            });
        });

        // Image Drag-and-Drop and Preview
        function setupDragAndDrop(dropArea, fileInput, preview, deleteButton) {
            const text = dropArea.querySelector('p');
            const buttons = dropArea.querySelectorAll('button');
            const addButton = Array.from(buttons).find(btn => !btn.classList.contains('delete-image'));

            addButton.addEventListener('click', (e) => {
                e.stopPropagation();
                fileInput.click();
            });

            dropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropArea.classList.add('drag-active');
            });

            dropArea.addEventListener('dragenter', (e) => {
                e.preventDefault();
                dropArea.classList.add('drag-active');
            });

            dropArea.addEventListener('dragleave', () => {
                dropArea.classList.remove('drag-active');
            });

            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                dropArea.classList.remove('drag-active');
                const files = e.dataTransfer.files;
                if (files.length > 0 && files[0].type.startsWith('image/')) {
                    fileInput.files = files;
                    handleImage(files[0], preview, text, addButton, deleteButton);
                }
            });

            dropArea.addEventListener('click', () => {
                fileInput.click();
            });

            fileInput.addEventListener('change', () => {
                const file = fileInput.files[0];
                if (file) {
                    handleImage(file, preview, text, addButton, deleteButton);
                } else {
                    clearImage(preview, text, addButton, fileInput, deleteButton);
                }
            });

            deleteButton.addEventListener('click', (e) => {
                e.stopPropagation();
                clearImage(preview, text, addButton, fileInput, deleteButton);
            });
        }

        function handleImage(file, preview, text, addButton, deleteButton) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const img = new Image();
                img.onload = () => {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const maxWidth = preview.closest('.main-photo') ? 400 : 150;
                    const maxHeight = preview.closest('.main-photo') ? 300 : 150;
                    let width = img.width;
                    let height = img.height;

                    if (width > height) {
                        if (width > maxWidth) {
                            height = Math.round((height * maxWidth) / width);
                            width = maxWidth;
                        }
                    } else {
                        if (height > maxHeight) {
                            width = Math.round((width * maxHeight) / height);
                            height = maxHeight;
                        }
                    }

                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0, width, height);
                    preview.src = canvas.toDataURL('image/jpeg');
                    preview.classList.remove('hidden');
                    text.classList.add('hidden');
                    addButton.classList.add('hidden');
                    deleteButton.classList.remove('hidden');
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        function clearImage(preview, text, addButton, fileInput, deleteButton) {
            preview.src = '';
            preview.classList.add('hidden');
            text.classList.remove('hidden');
            addButton.classList.remove('hidden');
            deleteButton.classList.add('hidden');
            fileInput.value = '';
        }

        // Setup for main photo
        const mainDropArea = document.getElementById('main-drop');
        if (mainDropArea) {
            setupDragAndDrop(mainDropArea, document.getElementById('main-file'), document.getElementById('main-preview'), document.getElementById('main-delete'));
        }

        // Setup for additional photos
        for (let i = 1; i <= 4; i++) {
            const dropArea = document.getElementById(`additional-drop-${i}`);
            if (dropArea) {
                setupDragAndDrop(dropArea, document.getElementById(`additional-file-${i}`), document.getElementById(`additional-preview-${i}`), document.getElementById(`additional-delete-${i}`));
            }
        }

        // Initial setup for remove buttons
        updateRemoveButtons();
    </script>
</body>
</html>