
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Laptop Store</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <link rel="stylesheet" href="/css/shoppingPage.css">
    <link rel="stylesheet" href="/css/universal-floating-elements.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">
    <link rel="stylesheet" href="/css/izitoast-styles.css">
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 font-sans antialiased">
    <div class="page-container">
        <%- include("../partials/user/header.ejs") %>

        <div class="main-container">
        <div class="flex flex-col lg:flex-row gap-6">
            <aside class="lg:w-1/4 bg-white rounded-3xl shadow-lg p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Filter By</h2>
                    <button class="lg:hidden text-indigo-600" onclick="toggleSidebar()">
                        <i class="bi bi-funnel text-xl"></i>
                    </button>
                </div>
                <form id="filter-form" action="/shop" method="GET" class="filter-content hidden lg:block">
                    <div class="mb-6 relative">
                        <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                        <input type="text" id="search" name="search" value="<%= searchQuery || '' %>"
                            class="w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm py-2 px-3 pr-10"
                            placeholder="Search products..." aria-label="Search products">
                        <button type="button" class="absolute right-2 top-9 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 <%= searchQuery ? 'block' : 'hidden' %> clear-search"
                            onclick="clearSearch()" aria-label="Clear search">
                            <i class="bi bi-x text-lg"></i>
                        </button>
                    </div>

                    <div class="mb-6">
                        <button type="button" class="w-full text-left font-semibold text-gray-800 flex justify-between items-center py-2"
                            onclick="toggleFilter('price')">
                            Max Price
                            <svg class="w-5 h-5 transform transition-transform" id="price-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div id="price-section" class="filter-section pt-2">
                            <div class="range-slider">
                                <input type="range" id="maxPrice" name="maxPrice" min="0" max="500000" step="1000"
                                    value="<%= query.maxPrice || 500000 %>" class="w-full">
                            </div>
                            <div class="text-sm text-gray-600 mt-2">
                                Up to â‚¹<span id="maxPriceValue">
                                    <%= query.maxPrice ? parseFloat(query.maxPrice).toLocaleString('en-IN') : '500,000' %>
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="mb-6">
                        <button type="button" class="w-full text-left font-semibold text-gray-800 flex justify-between items-center py-2"
                            onclick="toggleFilter('category')">
                            Category
                            <svg class="w-5 h-5 transform transition-transform" id="category-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div id="category-section" class="filter-section pt-2 mb-6">
                            <% categories.forEach(category => { %>
                                <label class="flex items-center mt-2">
                                    <input type="checkbox" name="category" value="<%= category.name %>"
                                        <%= query.category && query.category.includes(category.name) ? 'checked' : '' %>
                                        class="rounded text-indigo-600 focus:ring-indigo-500">
                                    <span class="ml-2 text-sm text-gray-600"><%= category.name %></span>
                                </label>
                            <% }) %>
                    </div>

                    <div class="mb-6">
                        <button type="button" class="w-full text-left font-semibold text-gray-800 flex justify-between items-center py-2"
                            onclick="toggleFilter('brand')">
                            Brand
                            <svg class="w-5 h-5 transform transition-transform" id="brand-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div id="brand-section" class="filter-section pt-2">
                            <% brands.forEach(brand => { %>
                                <label class="flex items-center mt-2">
                                    <input type="checkbox" name="brand" value="<%= brand %>" <%= query.brand && query.brand.includes(brand) ? 'checked' : '' %>
                                        class="rounded text-indigo-600 focus:ring-indigo-500">
                                    <span class="ml-2 text-sm text-gray-600"><%= brand %></span>
                                </label>
                            <% }) %>
                        </div>
                    </div>

                    <div class="mb-6">
                        <button type="button" class="w-full text-left font-semibold text-gray-800 flex justify-between items-center py-2"
                            onclick="toggleFilter('ram')">
                            RAM Capacity
                            <svg class="w-5 h-5 transform transition-transform" id="ram-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div id="ram-section" class="filter-section pt-2">
                            <% rams.forEach(ram => { %>
                                <label class="flex items-center mt-2">
                                    <input type="checkbox" name="ram" value="<%= ram %>" <%= query.ram && query.ram.includes(ram) ? 'checked' : '' %>
                                        class="rounded text-indigo-600 focus:ring-indigo-500">
                                    <span class="ml-2 text-sm text-gray-600"><%= ram %></span>
                                </label>
                            <% }) %>
                        </div>
                    </div>

                    <div class="mb-6">
                        <button type="button" class="w-full text-left font-semibold text-gray-800 flex justify-between items-center py-2"
                            onclick="toggleFilter('ssd')">
                            SSD Capacity
                            <svg class="w-5 h-5 transform transition-transform" id="ssd-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div id="ssd-section" class="filter-section pt-2">
                            <% ssds.forEach(ssd => { %>
                                <label class="flex items-center mt-2">
                                    <input type="checkbox" name="ssd" value="<%= ssd %>" <%= query.ssd && query.ssd.includes(ssd) ? 'checked' : '' %>
                                        class="rounded text-indigo-600 focus:ring-indigo-500">
                                    <span class="ml-2 text-sm text-gray-600"><%= ssd %></span>
                                </label>
                            <% }) %>
                        </div>
                    </div>

                    <div class="mb-6">
                        <button type="button" class="w-full text-left font-semibold text-gray-800 flex justify-between items-center py-2"
                            onclick="toggleFilter('graphics')">
                            Graphics Processor
                            <svg class="w-5 h-5 transform transition-transform" id="graphics-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        <div id="graphics-section" class="filter-section pt-2">
                            <% graphics.forEach(graphic => { %>
                                <label class="flex items-center mt-2">
                                    <input type="checkbox" name="graphics" value="<%= graphic %>"
                                        <%= query.graphics && query.graphics.includes(graphic) ? 'checked' : '' %>
                                        class="rounded text-indigo-600 focus:ring-indigo-500">
                                    <span class="ml-2 text-sm text-gray-600"><%= graphic %></span>
                                </label>
                            <% }) %>
                        </div>
                    </div>

                    <button type="submit"
                        class="w-full bg-indigo-600 text-white py-2.5 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-200">
                        Apply Filters
                    </button>
                </form>
            </aside>

            <main class="lg:w-3/4">
                <div class="flex flex-col sm:flex-row justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Products (<%= totalProducts %>)</h2>
                    <div class="flex items-center gap-4 mt-4 sm:mt-0">
                        <label for="sort" class="text-sm font-medium text-gray-700">Sort By:</label>
                        <select id="sort" name="sort" onchange="this.form.submit()" form="filter-form"
                            class="rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm py-2 px-3">
                            <option value="popularity" <%= query.sort === 'popularity' ? 'selected' : '' %>>Popularity</option>
                            <option value="newest" <%= query.sort === 'newest' ? 'selected' : '' %>>Newest First</option>
                            <option value="price-asc" <%= query.sort === 'price-asc' ? 'selected' : '' %>>Price Low-High</option>
                            <option value="price-desc" <%= query.sort === 'price-desc' ? 'selected' : '' %>>Price High-Low</option>
                            <option value="name-asc" <%= query.sort === 'name-asc' ? 'selected' : '' %>>A-Z</option>
                            <option value="name-desc" <%= query.sort === 'name-desc' ? 'selected' : '' %>>Z-A</option>
                        </select>
                    </div>
                </div>

                <% if (products.length === 0) { %>
                    <p class="text-gray-600 text-center py-10">No products found.</p>
                <% } else { %>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                        <% products.forEach(product => { %>
                            <div class="product-card bg-white rounded-xl shadow-md overflow-hidden transition-transform duration-300 hover:shadow-lg hover:-translate-y-1 <%= product.variants.every(v => v.stock === 0) ? 'out-of-stock' : '' %>">
                                <% 
                                    const productOffer = product.offer || 0;
                                    const categoryOffer = product.categoryId?.offer || 0;
                                    const finalOffer = Math.max(productOffer, categoryOffer);
                                %>
                                <% if (finalOffer > 0) { %>
                                    <span class="offer-badge"><%= finalOffer %>% OFF</span>
                                <% } %>
                                <a href="/shop/product/<%= product._id %>" class="block">
                                    <img src="<%= product.images.find(img => img.isMain)?.url || 'https://placehold.co/200x150' %>"
                                         alt="<%= product.name %> laptop"
                                         class="w-full h-48 object-cover">
                                    <div class="p-4 flex flex-col flex-grow">
                            
                                        <h3 class="text-lg font-semibold text-gray-800 mb-2 line-clamp-2"><%= product.name %></h3>
                                        <ul class="text-sm text-gray-600 mb-4">
                                            <li><%= product.categoryId.name %></li>
                                            <li><%= product.CPU %></li>
                                            <li><%= product.variants[0]?.RAM || 'N/A' %> RAM</li>
                                            <li><%= product.variants[0]?.Storage || 'N/A' %> Storage</li>
                                            <li><%= product.screen %></li>
                                        </ul>
                                        <% let item = product.variants.find(v => v.stock > 0) %>
                                        <% let basePrice = product.salePrice + (item?.priceAdjustment || 0)
                                        const discountedPrice = finalOffer > 0 
                                            ? Math.round(basePrice * (1 - finalOffer / 100)) 
                                            : basePrice;%>
                                            <% if (finalOffer > 0) { %>
                                            <p class="align-self-center text-sm text-muted mb-1">
                                                <del>â‚¹<%= basePrice.toLocaleString('en-IN') %></del>
                                            </p>
                                            <% } %>
                                        <p class="align-self-center text-lg font-bold text-indigo-600 ">â‚¹<%= discountedPrice.toLocaleString('en-IN') %></p>
                                    </div>
                                </a>
                                <div class="action-buttons flex justify-center gap-2 p-4 pt-0">
                                    <button class="d-flex align-items-center gap-2 px-2 py-2 btn btn-secondary wishlist-btn text-gray-600 hover:text-red-500 transition-colors"
                                            data-product-id="<%= product._id %>"
                                            title="Add to wishlist" aria-label="Add to wishlist"
                                            onclick="event.stopPropagation(); toggleWishlist(this)">
                                         <% let isWishlisted=false; 
                                            if (typeof wishlistIds !=='undefined' ){
                                                isWishlisted=wishlistIds?.includes(product._id.toString()) } %>
                                        <i class="bi <%= isWishlisted ?  'bi-heart-fill' : 'bi-heart' %> text-xl"></i> <h6 class="m-0">WishList</h6> 
                                    </button>
                                    <button class="d-flex align-items-center gap-2 px-2 py-2 btn btn-warning cart-btn text-gray-600 hover:text-indigo-500 transition-colors"
                                            data-product-id="<%= product._id %>"
                                            title="Add to cart" aria-label="Add to cart"
                                            onclick="event.stopPropagation(); addToCart(this)">
                                        <i class="bi bi-cart-plus text-xl"></i><h6 class="m-0">Add to Cart</h6> 
                                    </button>
                                </div>
                            </div>
                        <% }) %>
                    </div>

                    <%- include("../partials/user/pagination", { currentQueryString, currentPage, totalPages }) %>
                <% } %>
            </main>
        </div>
        </div>

        <%- include("../partials/user/footer.ejs") %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function toggleSidebar() {
            const filterContent = document.querySelector('.filter-content');
            filterContent.classList.toggle('hidden');
        }

        function toggleFilter(section) {
            const sectionElement = document.getElementById(`${section}-section`);
            const toggleIcon = document.getElementById(`${section}-toggle`);
            sectionElement.classList.toggle('open');
            toggleIcon.classList.toggle('rotate-180');
        }

        function clearSearch() {
            const searchInput = document.getElementById('search');
            searchInput.value = '';
            document.getElementById('filter-form').submit();
        }

        document.getElementById('search').addEventListener('input', (e) => {
            const clearButton = document.querySelector('.clear-search');
            clearButton.classList.toggle('hidden', e.target.value === '');
        });

        let searchTimeout;
        document.getElementById('search').addEventListener('input', () => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                document.getElementById('filter-form').submit();
            }, 500);
        });

        const maxPriceInput = document.getElementById('maxPrice');
        const maxPriceValue = document.getElementById('maxPriceValue');

        function updatePriceValue() {
            const max = parseFloat(maxPriceInput.value);
            maxPriceValue.textContent = max.toLocaleString('en-IN');
        }

        maxPriceInput.addEventListener('input', updatePriceValue);
        updatePriceValue();

        async function toggleWishlist(button) {
            const productId = button.dataset.productId;
            const icon = button.querySelector('i');
            try {
                const response = await fetch('/wishlist/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });
                if(response.redirected && response.url.includes('/login')){ 
                                    Swal.fire({
                                        title: 'Please Login',
                                        text: 'Please Login to add product to Cart',
                                        icon: 'warning',
                                        confirmButtonText: 'Login'
                                    }).then((result) => {
                                        window.location.href = "/login";
                                    });
                                    return
                                }
                const result = await response.json();
                if (result.success) {
                    const badgeCount = document.querySelector('.wishlist-badge')
                    if(typeof result.count === 'number' && result.count >= 0){
                        badgeCount.innerText = result.count;
                        if (result.count > 0) {
                            badgeCount.classList.remove('d-none');
                            } else {
                                badgeCount.classList.add('d-none');
                            }
                    }
                    if (result.action == 'added') {
                                iziToast.success({
                                title: '',
                                message: 'Product added to Wishlist',
                                position: 'bottomRight',
                                timeout: 2000
                            });
                                icon.classList.remove('bi-heart');
                                icon.classList.add('bi-heart-fill');
                            } else {
                                iziToast.success({
                                title: '',
                                message: 'Product removed from wishlst',
                                position: 'bottomRight',
                                timeout: 2000
                            });
                                icon.classList.remove('bi-heart-fill');
                                icon.classList.add('bi-heart');
                            }

                } else {
                    $.toast({
                        title: 'Error',
                        message: result.message || 'Failed to update wishlist.',
                        type: 'error',
                        duration: 3000,
                        position: 'top-right'
                    });
                        window.location.href = '/login';
                }

            } catch (error) {
                console.error('Wishlist error:', error);
                $.toast({
                    title: 'Error',
                    message: 'An error occurred while updating wishlist.',
                    type: 'error',
                    duration: 3000,
                    position: 'top-right'
                });
            }
        }

        async function addToCart(button) {
            const productId = button.dataset.productId;
            try {
                const response = await fetch('/cart/add-from-shop', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });
                 if(response.redirected && response.url.includes('/login')){ 
                                    Swal.fire({
                                        title: 'Please Login',
                                        text: 'Please Login to add product to Cart',
                                        icon: 'warning',
                                        confirmButtonText: 'Login'
                                    }).then((result) => {
                                        window.location.href = "/login";
                                    });
                                    return
                                }
                const result = await response.json();
                if (result.success) {
                    const cartBadge = document.querySelector('.cart-badge')
                    if(typeof result.count === 'number' && result.count >= 0){
                        cartBadge.innerText = result.count;
                        if (result.count > 0) {
                            cartBadge.classList.remove('d-none');
                        } else {
                            cartBadge.classList.add('d-none');
                        }
                    }
                    if(result.success === true){
                                iziToast.success({
                                title: '',
                                message: result.message ||'Product added to cart',
                                position: 'bottomRight',
                                timeout: 2000
                            });
                            }else if(result.success === false){
                                iziToast.warning({
                                title: '',
                                message: result.message || "Cart limit Reached",
                                position: 'bottomRight',
                                timeout: 2000
                            });
                            }
                } else {
                    iziToast.error({
                            title: 'Error',
                            message: result.message || 'Product Out of Stock',
                            position: 'bottomRight',
                            timeout: 2000
                            });
                    if (result.message === 'Please log in') {
                        window.location.href = '/login';
                    }
                }
            } catch (error) {
                console.error('Cart error:', error);
                $.toast({
                    title: 'Error',
                    message: 'An error occurred while adding to cart.',
                    type: 'error',
                    duration: 2000,
                    position: 'top-right'
                });
            }
        }
    </script>
</body>
</html>