<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Reset Password</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/newPassword.css">
</head>
<body>

  <div class="container">
    <div class="key-icon">
      <i class="fas fa-key"></i>
    </div>
    
    <h1>Reset Password</h1>
    <p class="subtitle">Create a strong new password for your account</p>

    <form action="/reset-password" method="POST" id="resetForm">
      <div class="form-group">
        <label for="password">New Password</label>
        <div class="input-container">
          <input type="password" name="password" id="password" placeholder="Enter new password" required />
          <i class="fas fa-lock input-icon"></i>
          <i class="fas fa-eye toggle-password" id="togglePassword1"></i>
        </div>
        <div class="password-strength" id="passwordStrength">
          <div class="strength-bar" id="strengthBar"></div>
        </div>
        <div class="strength-text" id="strengthText"></div>
        
        <div class="password-requirements" id="passwordRequirements">
          <div class="requirement" id="lengthReq">
            <i class="fas fa-circle"></i>
            <span>At least 8 characters long</span>
          </div>
          <div class="requirement" id="uppercaseReq">
            <i class="fas fa-circle"></i>
            <span>One uppercase letter</span>
          </div>
          <div class="requirement" id="lowercaseReq">
            <i class="fas fa-circle"></i>
            <span>One lowercase letter</span>
          </div>
          <div class="requirement" id="numberReq">
            <i class="fas fa-circle"></i>
            <span>One number</span>
          </div>
          <div class="requirement" id="specialReq">
            <i class="fas fa-circle"></i>
            <span>One special character</span>
          </div>
        </div>
      </div>

      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <div class="input-container">
          <input type="password" name="confirmPassword" id="confirmPassword" placeholder="Confirm new password" required />
          <i class="fas fa-lock input-icon"></i>
          <i class="fas fa-eye toggle-password" id="togglePassword2"></i>
        </div>
      </div>

      <% if (typeof error !== 'undefined' && error) { %>
        <div class="error-message">
          <i class="fas fa-exclamation-triangle"></i>
          <%= error %>
        </div>
      <% } %>

      <button type="submit" class="btn" id="submitBtn">
        <i class="fas fa-shield-alt"></i>
        Reset Password
      </button>
    </form>

    <div class="back-link">
      <a href="/login">
        <i class="fas fa-arrow-left"></i>
        Back to Login
      </a>
    </div>
  </div>

  <script>
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordStrength = document.getElementById('passwordStrength');
    const strengthBar = document.getElementById('strengthBar');
    const strengthText = document.getElementById('strengthText');
    const passwordRequirements = document.getElementById('passwordRequirements');
    const submitBtn = document.getElementById('submitBtn');
    const form = document.getElementById('resetForm');

    // Password visibility toggles
    document.getElementById('togglePassword1').addEventListener('click', function() {
      togglePasswordVisibility(passwordInput, this);
    });

    document.getElementById('togglePassword2').addEventListener('click', function() {
      togglePasswordVisibility(confirmPasswordInput, this);
    });

    function togglePasswordVisibility(input, icon) {
      if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
      } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
      }
    }

    passwordInput.addEventListener('input', function() {
      const password = this.value;
      
      if (password.length > 0) {
        passwordStrength.classList.add('show');
        passwordRequirements.classList.add('show');
        
        const strength = checkPasswordStrength(password);
        updateStrengthIndicator(strength);
        updateRequirements(password);
      } else {
        passwordStrength.classList.remove('show');
        passwordRequirements.classList.remove('show');
      }
    });

    function checkPasswordStrength(password) {
      let score = 0;
      
      if (password.length >= 8) score++;
      if (password.length >= 12) score++;
      
      if (/[a-z]/.test(password)) score++;
      if (/[A-Z]/.test(password)) score++;
      if (/[0-9]/.test(password)) score++;
      if (/[^a-zA-Z0-9]/.test(password)) score++;
      
      return Math.min(score, 3); 
    }

    function updateStrengthIndicator(strength) {
      strengthBar.className = 'strength-bar';
      strengthText.className = 'strength-text';
      
      switch(strength) {
        case 0:
        case 1:
          strengthBar.classList.add('strength-weak');
          strengthText.classList.add('strength-weak-text');
          strengthText.textContent = 'Weak password';
          break;
        case 2:
          strengthBar.classList.add('strength-medium');
          strengthText.classList.add('strength-medium-text');
          strengthText.textContent = 'Medium password';
          break;
        case 3:
          strengthBar.classList.add('strength-strong');
          strengthText.classList.add('strength-strong-text');
          strengthText.textContent = 'Strong password';
          break;
      }
    }

    function updateRequirements(password) {
      const requirements = [
        { id: 'lengthReq', test: password.length >= 8 },
        { id: 'uppercaseReq', test: /[A-Z]/.test(password) },
        { id: 'lowercaseReq', test: /[a-z]/.test(password) },
        { id: 'numberReq', test: /[0-9]/.test(password) },
        { id: 'specialReq', test: /[^a-zA-Z0-9]/.test(password) }
      ];

      requirements.forEach(req => {
        const element = document.getElementById(req.id);
        const icon = element.querySelector('i');
        
        if (req.test) {
          element.classList.remove('unmet');
          element.classList.add('met');
          icon.classList.remove('fa-circle');
          icon.classList.add('fa-check-circle');
        } else {
          element.classList.remove('met');
          element.classList.add('unmet');
          icon.classList.remove('fa-check-circle');
          icon.classList.add('fa-circle');
        }
      });
    }

    form.addEventListener('submit', function(e) {
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      if (password !== confirmPassword) {
        e.preventDefault();
        
        confirmPasswordInput.style.borderColor = '#e53e3e';
        confirmPasswordInput.style.background = '#fed7d7';
        
        const existingError = document.querySelector('.password-mismatch-error');
        if (existingError) {
          existingError.remove();
        }
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message password-mismatch-error';
        errorDiv.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Passwords do not match';
        
        confirmPasswordInput.parentNode.parentNode.appendChild(errorDiv);
        
        setTimeout(() => {
          confirmPasswordInput.style.borderColor = '';
          confirmPasswordInput.style.background = '';
          if (errorDiv.parentNode) {
            errorDiv.remove();
          }
        }, 3000);
        
        return;
      }
      
      submitBtn.classList.add('loading');
      submitBtn.innerHTML = 'Resetting...';
      submitBtn.disabled = true;
    });

    confirmPasswordInput.addEventListener('input', function() {
      const password = passwordInput.value;
      const confirmPassword = this.value;
      
      if (confirmPassword.length > 0) {
        if (password === confirmPassword) {
          this.style.borderColor = '#48bb78';
          this.style.background = '#f0fff4';
        } else {
          this.style.borderColor = '#e53e3e';
          this.style.background = '#fed7d7';
        }
      } else {
        this.style.borderColor = '';
        this.style.background = '';
      }
    });

    const inputs = document.querySelectorAll('input');
    inputs.forEach(input => {
      input.addEventListener('focus', function() {
        this.parentNode.querySelector('.input-icon').style.color = '#667eea';
      });
      
      input.addEventListener('blur', function() {
        if (!this.value) {
          this.parentNode.querySelector('.input-icon').style.color = '#a0aec0';
        }
      });
    });
  </script>

</body>
</html>