<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Reset Password</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Inter", sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1rem;
    }

    .container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
      padding: 3rem 2.5rem;
      max-width: 450px;
      width: 100%;
      text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .key-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 2rem;
      animation: pulse 2s infinite;
      position: relative;
    }

    .key-icon i {
      font-size: 2.5rem;
      color: white;
    }

    .key-icon::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      border: 2px solid rgba(102, 126, 234, 0.3);
      border-radius: 50%;
      animation: ripple 2s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }

    @keyframes ripple {
      0% { transform: scale(1); opacity: 1; }
      100% { transform: scale(1.5); opacity: 0; }
    }

    h1 {
      font-size: 2.2rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: #2d3748;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .subtitle {
      color: #718096;
      margin-bottom: 2.5rem;
      font-size: 1rem;
      line-height: 1.5;
    }

    form {
      display: flex;
      flex-direction: column;
      text-align: left;
    }

    .form-group {
      position: relative;
      margin-bottom: 1.5rem;
    }

    label {
      font-size: 0.95rem;
      font-weight: 600;
      margin-bottom: 0.75rem;
      display: block;
      color: #2d3748;
    }

    .input-container {
      position: relative;
    }

    .input-icon {
      position: absolute;
      left: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: #a0aec0;
      font-size: 1.1rem;
      z-index: 2;
    }

    .toggle-password {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: #a0aec0;
      cursor: pointer;
      font-size: 1.1rem;
      z-index: 2;
      transition: color 0.3s ease;
    }

    .toggle-password:hover {
      color: #667eea;
    }

    input[type="password"], input[type="text"] {
      width: 100%;
      padding: 1rem 3rem 1rem 3rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      background: #f7fafc;
      transition: all 0.3s ease;
      outline: none;
    }

    input[type="password"]:focus, input[type="text"]:focus {
      border-color: #667eea;
      background: white;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    input[type="password"]:focus + .input-icon,
    input[type="text"]:focus + .input-icon {
      color: #667eea;
    }

    /* Password strength indicator */
    .password-strength {
      margin-top: 0.5rem;
      height: 4px;
      background: #e2e8f0;
      border-radius: 2px;
      overflow: hidden;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .password-strength.show {
      opacity: 1;
    }

    .strength-bar {
      height: 100%;
      width: 0%;
      transition: all 0.3s ease;
      border-radius: 2px;
    }

    .strength-weak { background: #e53e3e; width: 33%; }
    .strength-medium { background: #ed8936; width: 66%; }
    .strength-strong { background: #48bb78; width: 100%; }

    .strength-text {
      font-size: 0.8rem;
      margin-top: 0.25rem;
      font-weight: 500;
    }

    .strength-weak-text { color: #e53e3e; }
    .strength-medium-text { color: #ed8936; }
    .strength-strong-text { color: #48bb78; }

    /* Password requirements */
    .password-requirements {
      margin-top: 1rem;
      padding: 1rem;
      background: #f7fafc;
      border-radius: 8px;
      border-left: 4px solid #667eea;
      text-align: left;
      opacity: 0;
      max-height: 0;
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .password-requirements.show {
      opacity: 1;
      max-height: 200px;
    }

    .requirement {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.85rem;
      margin-bottom: 0.25rem;
      color: #4a5568;
    }

    .requirement i {
      font-size: 0.8rem;
    }

    .requirement.met {
      color: #48bb78;
    }

    .requirement.unmet {
      color: #a0aec0;
    }

    .error-message {
      color: #e53e3e;
      font-size: 0.9rem;
      margin-top: 0.5rem;
      padding: 0.75rem;
      background: #fed7d7;
      border-radius: 8px;
      border-left: 4px solid #e53e3e;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .btn {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      border: none;
      padding: 1.25rem;
      border-radius: 12px;
      width: 100%;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 1.5rem;
      position: relative;
      overflow: hidden;
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }

    .btn:active {
      transform: translateY(0);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .btn i {
      margin-right: 0.5rem;
    }

    .back-link {
      margin-top: 2rem;
      text-align: center;
    }

    .back-link a {
      color: #667eea;
      text-decoration: none;
      font-size: 0.95rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: color 0.3s ease;
    }

    .back-link a:hover {
      color: #764ba2;
    }

    /* Loading animation for button */
    .btn.loading {
      pointer-events: none;
    }

    .btn.loading::after {
      content: '';
      position: absolute;
      width: 20px;
      height: 20px;
      margin: auto;
      border: 2px solid transparent;
      border-top-color: #ffffff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive design */
    @media (max-width: 480px) {
      .container {
        padding: 2rem 1.5rem;
        margin: 0.5rem;
      }

      h1 {
        font-size: 1.8rem;
      }

      .key-icon {
        width: 60px;
        height: 60px;
      }

      .key-icon i {
        font-size: 2rem;
      }

      input[type="password"], input[type="text"] {
        padding: 1rem 2.5rem 1rem 2.5rem;
      }
    }

    /* Success state animation */
    .success-animation {
      animation: successPulse 0.6s ease-out;
    }

    @keyframes successPulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
  </style>
</head>
<body>

  <div class="container">
    <div class="key-icon">
      <i class="fas fa-key"></i>
    </div>
    
    <h1>Reset Password</h1>
    <p class="subtitle">Create a strong new password for your account</p>

    <form action="/reset-password" method="POST" id="resetForm">
      <div class="form-group">
        <label for="password">New Password</label>
        <div class="input-container">
          <input type="password" name="password" id="password" placeholder="Enter new password" required />
          <i class="fas fa-lock input-icon"></i>
          <i class="fas fa-eye toggle-password" id="togglePassword1"></i>
        </div>
        <div class="password-strength" id="passwordStrength">
          <div class="strength-bar" id="strengthBar"></div>
        </div>
        <div class="strength-text" id="strengthText"></div>
        
        <div class="password-requirements" id="passwordRequirements">
          <div class="requirement" id="lengthReq">
            <i class="fas fa-circle"></i>
            <span>At least 8 characters long</span>
          </div>
          <div class="requirement" id="uppercaseReq">
            <i class="fas fa-circle"></i>
            <span>One uppercase letter</span>
          </div>
          <div class="requirement" id="lowercaseReq">
            <i class="fas fa-circle"></i>
            <span>One lowercase letter</span>
          </div>
          <div class="requirement" id="numberReq">
            <i class="fas fa-circle"></i>
            <span>One number</span>
          </div>
          <div class="requirement" id="specialReq">
            <i class="fas fa-circle"></i>
            <span>One special character</span>
          </div>
        </div>
      </div>

      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <div class="input-container">
          <input type="password" name="confirmPassword" id="confirmPassword" placeholder="Confirm new password" required />
          <i class="fas fa-lock input-icon"></i>
          <i class="fas fa-eye toggle-password" id="togglePassword2"></i>
        </div>
      </div>

      <% if (typeof error !== 'undefined' && error) { %>
        <div class="error-message">
          <i class="fas fa-exclamation-triangle"></i>
          <%= error %>
        </div>
      <% } %>

      <button type="submit" class="btn" id="submitBtn">
        <i class="fas fa-shield-alt"></i>
        Reset Password
      </button>
    </form>

    <div class="back-link">
      <a href="/login">
        <i class="fas fa-arrow-left"></i>
        Back to Login
      </a>
    </div>
  </div>

  <script>
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordStrength = document.getElementById('passwordStrength');
    const strengthBar = document.getElementById('strengthBar');
    const strengthText = document.getElementById('strengthText');
    const passwordRequirements = document.getElementById('passwordRequirements');
    const submitBtn = document.getElementById('submitBtn');
    const form = document.getElementById('resetForm');

    // Password visibility toggles
    document.getElementById('togglePassword1').addEventListener('click', function() {
      togglePasswordVisibility(passwordInput, this);
    });

    document.getElementById('togglePassword2').addEventListener('click', function() {
      togglePasswordVisibility(confirmPasswordInput, this);
    });

    function togglePasswordVisibility(input, icon) {
      if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
      } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
      }
    }

    // Password strength checker
    passwordInput.addEventListener('input', function() {
      const password = this.value;
      
      if (password.length > 0) {
        passwordStrength.classList.add('show');
        passwordRequirements.classList.add('show');
        
        const strength = checkPasswordStrength(password);
        updateStrengthIndicator(strength);
        updateRequirements(password);
      } else {
        passwordStrength.classList.remove('show');
        passwordRequirements.classList.remove('show');
      }
    });

    function checkPasswordStrength(password) {
      let score = 0;
      
      // Length check
      if (password.length >= 8) score++;
      if (password.length >= 12) score++;
      
      // Character variety checks
      if (/[a-z]/.test(password)) score++;
      if (/[A-Z]/.test(password)) score++;
      if (/[0-9]/.test(password)) score++;
      if (/[^a-zA-Z0-9]/.test(password)) score++;
      
      return Math.min(score, 3); // Cap at 3 for our 3-level system
    }

    function updateStrengthIndicator(strength) {
      strengthBar.className = 'strength-bar';
      strengthText.className = 'strength-text';
      
      switch(strength) {
        case 0:
        case 1:
          strengthBar.classList.add('strength-weak');
          strengthText.classList.add('strength-weak-text');
          strengthText.textContent = 'Weak password';
          break;
        case 2:
          strengthBar.classList.add('strength-medium');
          strengthText.classList.add('strength-medium-text');
          strengthText.textContent = 'Medium password';
          break;
        case 3:
          strengthBar.classList.add('strength-strong');
          strengthText.classList.add('strength-strong-text');
          strengthText.textContent = 'Strong password';
          break;
      }
    }

    function updateRequirements(password) {
      const requirements = [
        { id: 'lengthReq', test: password.length >= 8 },
        { id: 'uppercaseReq', test: /[A-Z]/.test(password) },
        { id: 'lowercaseReq', test: /[a-z]/.test(password) },
        { id: 'numberReq', test: /[0-9]/.test(password) },
        { id: 'specialReq', test: /[^a-zA-Z0-9]/.test(password) }
      ];

      requirements.forEach(req => {
        const element = document.getElementById(req.id);
        const icon = element.querySelector('i');
        
        if (req.test) {
          element.classList.remove('unmet');
          element.classList.add('met');
          icon.classList.remove('fa-circle');
          icon.classList.add('fa-check-circle');
        } else {
          element.classList.remove('met');
          element.classList.add('unmet');
          icon.classList.remove('fa-check-circle');
          icon.classList.add('fa-circle');
        }
      });
    }

    // Form validation
    form.addEventListener('submit', function(e) {
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      // Check if passwords match
      if (password !== confirmPassword) {
        e.preventDefault();
        
        // Add visual feedback
        confirmPasswordInput.style.borderColor = '#e53e3e';
        confirmPasswordInput.style.background = '#fed7d7';
        
        // Create temporary error message
        const existingError = document.querySelector('.password-mismatch-error');
        if (existingError) {
          existingError.remove();
        }
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message password-mismatch-error';
        errorDiv.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Passwords do not match';
        
        confirmPasswordInput.parentNode.parentNode.appendChild(errorDiv);
        
        // Remove error styling after a delay
        setTimeout(() => {
          confirmPasswordInput.style.borderColor = '';
          confirmPasswordInput.style.background = '';
          if (errorDiv.parentNode) {
            errorDiv.remove();
          }
        }, 3000);
        
        return;
      }
      
      // Add loading state
      submitBtn.classList.add('loading');
      submitBtn.innerHTML = 'Resetting...';
      submitBtn.disabled = true;
    });

    // Real-time password match validation
    confirmPasswordInput.addEventListener('input', function() {
      const password = passwordInput.value;
      const confirmPassword = this.value;
      
      if (confirmPassword.length > 0) {
        if (password === confirmPassword) {
          this.style.borderColor = '#48bb78';
          this.style.background = '#f0fff4';
        } else {
          this.style.borderColor = '#e53e3e';
          this.style.background = '#fed7d7';
        }
      } else {
        this.style.borderColor = '';
        this.style.background = '';
      }
    });

    // Focus enhancement
    const inputs = document.querySelectorAll('input');
    inputs.forEach(input => {
      input.addEventListener('focus', function() {
        this.parentNode.querySelector('.input-icon').style.color = '#667eea';
      });
      
      input.addEventListener('blur', function() {
        if (!this.value) {
          this.parentNode.querySelector('.input-icon').style.color = '#a0aec0';
        }
      });
    });
  </script>

</body>
</html>