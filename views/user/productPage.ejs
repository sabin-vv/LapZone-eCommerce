<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= product.name %> - LapZone</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet"/>
    <link rel="stylesheet" href="/css/header.css" />
    <link rel="stylesheet" href="/css/productPage.css" />
    <link rel="stylesheet" href="/css/universal-floating-elements.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css" />
    <link rel="stylesheet" href="/css/izitoast-styles.css" />
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="page-container">
      <%- include("../partials/user/header.ejs") %>
      <div class="product-container">
      <div class="product-images">
        <div id="mainImageContainer">
          <img src="<%= product.images.find(img => img.isMain)?.url || 'https://placehold.co/600x400' %>"
                alt="<%= product.name %>"
                class="main-image"
                id="mainImage" />
          <div class="zoom-lens" id="zoomLens"></div>
          <div class="zoom-hint">Hover to zoom</div>
        </div>
        <div class="d-flex flex-wrap">
          <% product.images.forEach(img=> { %>
          <img src="<%= img.url %>" alt="<%= product.name %> thumbnail"   class="thumbnail <%= img.isMain ? 'active' : '' %>" onclick="changeImage('<%= img.url %>')" />
          <% }) %>
        </div>
      </div>
      <div class="product-details">
        <nav class="breadcrumb" id="breadcrumb"></nav>
        <div class="product-title-section">
          <h1><%= product.name %></h1>
          <div class="wishlist-icon-container d-flex">
            <i class="bi <%= isWishlisted ? 'bi-heart-fill' : 'bi-heart' %> wishlist-icon" onclick="addToWishlist('<%= product._id %>', this)"  title="Add to Wishlist" ></i>
          </div>
        </div>
        <% const productOffer = product.offer || 0;         const categoryOffer = product.categoryId?.offer || 0;         const finalOffer = Math.max(productOffer, categoryOffer); %>                 
        <div class="price">
          <% if (finalOffer > 0) { %>
            <i class="bi bi-arrow-down-circle fs-5"></i>
            <span><%= finalOffer %>% OFF</span>
          <% } %>
          ₹<span id="dynamicPrice"><%= product.salePrice.toLocaleString('en-IN') %></span>
        </div>
         <div class="description">
            <%= product.description || 'No description available.' %>
          </div>
        <div class="offers">
          <ul>
            <% if (finalOffer && finalOffer> 0) { %>
            <li><%= finalOffer %>% off on this product!</li>
            <% } else { %>
            <li>No offers available.</li>
            <% } %>
          </ul>
        </div>
        <input type="hidden" id="salePriceValue" name="salePrice" value="<%= product.salePrice %>" />         
        <% const available = product.variants.find(v => v.stock > 0) %>
        <div class="variant-selector">
          <div>RAM</div>
          <% const uniqueRAMs = [...new Set(product.variants.map(variant => variant.RAM))]; %>
          <div class="variant-options" id="ram-options">
            <% uniqueRAMs.forEach(ram => {              const hasStock = product.variants.some(v => v.RAM === ram && v.stock > 0); %>
              <button class="variant-btn <%= !hasStock ? 'disabled' : '' %>" data-ram="<%= ram %>" onclick="<%= hasStock ? `selectRAM('${ram}', this)` : '' %>"                <%= !hasStock ? 'disabled' : '' %>>
                <%= ram %>
              </button>
            <% }) %>
          </div>
          <div>Storage</div>
          <div class="variant-options" id="storage-options">
            <% const uniqueStorages = [...new Set(product.variants.map(variant => variant.Storage))]; %>
            <% uniqueStorages.forEach(storage => {              const hasStock = product.variants.some(v => v.Storage === storage && v.stock > 0); %>
              <button
                class="variant-btn <%= !hasStock ? 'disabled' : '' %>"
                data-storage="<%= storage %>"
                onclick="<%= hasStock ? `selectStorage('${storage}', this)` : '' %>"
                <%= !hasStock ? 'disabled' : '' %>>
                <%= storage %>
              </button>
            <% }) %>
          </div>
        </div>
        <% if(!available){ %>
        <span class="stockout">Out of stock</span>
        <% }  %>
        <div class="action-buttons">
          <button class="add-to-cart-btn mt-0 btn btn-warning" <%= available ? '' : 'disabled' %> onclick="addToCart('<%= product._id %>')">Add to Cart <i class="bi bi-cart-plus"></i>
          </button>
        </div>
      </div>
    </div>
    
    <div class="container my-5 px-3 px-md-5">
      <div class="specifications">
        <h2>Specifications</h2>
        <dl>
          <% if (product.name) { %>
          <dt>Model Name</dt>
          <dd><%= product.name %></dd>
          <% } %> <% if (product.brand) { %>
          <dt>Brand</dt>
          <dd><%= product.brand %></dd>
          <% } %> <% if (product.modelNumber) { %>
          <dt>Model Number</dt>
          <dd><%= product.modelNumber %></dd>
          <% } %> <% if (product.category) { %>
          <dt>Category</dt>
          <dd><%= product.category %></dd>
          <% } %> <% if (product.color) { %>
          <dt>Colour</dt>
          <dd><%= product.color %></dd>
          <% } %> <% if (product.CPU) { %>
          <dt>Processor</dt>
          <dd><%= product.CPU %></dd>
          <% } %> <% if (product.OS) { %>
          <dt>Operating System</dt>
          <dd><%= product.OS %></dd>
          <% } %> <% if (product.screen) { %>
          <dt>Display</dt>
          <dd><%= product.screen %></dd>
          <% } %> <% if (product.webcam) { %>
          <dt>Web Camera</dt>
          <dd><%= product.webcam %></dd>
          <% } %> <% if (product.ports && product.ports.length> 0) { %> <%          product.ports.forEach(portEntry=> { %> <% if (portEntry['USB Type-A'])          { %>
          <dt>USB Type-A</dt>
          <dd><%= portEntry['USB Type-A'] %></dd>
          <% } %> <% if (portEntry['USB Type-C']) { %>
          <dt>USB Type-C</dt>
          <dd><%= portEntry['USB Type-C'] %></dd>
          <% } %> <% if (portEntry['HDMI']) { %>
          <dt>HDMI</dt>
          <dd><%= portEntry['HDMI'] %></dd>
          <% } %> <% if (portEntry['AudioJack']) { %>
          <dt>Audio Jack</dt>
          <dd><%= portEntry['AudioJack'] %></dd>
          <% } %> <% if (portEntry['LAN']) { %>
          <dt>LAN</dt>
          <dd><%= portEntry['LAN'] %></dd>
          <% } %> <% if (portEntry['Card Reader']) { %>
          <dt>Card Reader</dt>
          <dd><%= portEntry['Card Reader'] %></dd>
          <% } %> <% }) %> <% } %> <% if (product.warranty) { %>
          <dt>Warranty</dt>
          <dd><%= product.warranty %></dd>
          <% } %>
        </dl>
      </div>
    </div>
        
    <section class="suggestions">
      <h1>Suggestions</h1>
      <div class="suggestions-grid">
        <% productSuggesions.forEach(suggestion=> { const mainImage =        suggestion.images.find(img => img.isMain); const variant =        suggestion.variants?.[0]; %>
        <div class="suggestion">
          <a href="/shop/product/<%= suggestion._id %>">
            <img src="<%= mainImage?.url || '/default-image.jpg' %>" alt="<%= suggestion.name %>" />
            <div class="card-body">
              <h5><%= suggestion.name %></h5>
              <p class="card-text">
                <%= suggestion.description.substring(0, 100) %>...
              </p>
            </div>
            <div class="card-footer">₹<%= suggestion.salePrice || 'N/A' %></div>
          </a>
        </div>
        <% }); %>
      </div>
    </section>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    
    <script>
      const basePrice = <%= product.salePrice %>;
      const variants = <%- JSON.stringify(product.variants) %>;
      const finalOffer = <%= Math.max(product.offer || 0, product.categoryId?.offer || 0) %>;
      const finalOfferedPrice = Math.round((basePrice * finalOffer / 100));
      let selectedRAM = null;
      let selectedStorage = null;

      function highlightButton(containerId, value, attr) {
        document.querySelectorAll(`#${containerId} .variant-btn`).forEach(btn => {
          btn.classList.remove('active');
          if (btn.dataset[attr] === value) {
            btn.classList.add('active');
          }
        });
      }

      function selectRAM(ram) {
        selectedRAM = ram;
        highlightButton('ram-options', ram, 'ram');
        const match = variants.find(v => v.RAM === ram);
        if (match) {
          selectedStorage = match.Storage;
          highlightButton('storage-options', selectedStorage, 'storage');
        }
        updatePrice();
      }

      function selectStorage(storage) {
        selectedStorage = storage;
        highlightButton('storage-options', storage, 'storage');
        const match = variants.find(v => v.Storage === storage);
        if (match) {
          selectedRAM = match.RAM;
          highlightButton('ram-options', selectedRAM, 'ram');
        }
        updatePrice();
      }

      function updatePrice() {
        const priceEl = document.getElementById("dynamicPrice");
        const hiddenInput = document.getElementById("salePriceValue");
        if (!priceEl || !hiddenInput) return;
       
        if (selectedRAM && selectedStorage) {
          const variant = variants.find(v => v.RAM === selectedRAM && v.Storage === selectedStorage);
          if (variant) {
            const priceBeforeDiscount = basePrice + (variant.priceAdjustment || 0);
            const finalPrice = Math.round(priceBeforeDiscount * (1 - finalOffer / 100))
            priceEl.textContent = finalPrice.toLocaleString("en-IN");
            hiddenInput.value = finalPrice;
            return;
          }
        }
        priceEl.textContent = basePrice.toLocaleString("en-IN");
        hiddenInput.value = basePrice;
      }

      function changeImage(url) {
        const container = document.getElementById("mainImageContainer");
                
        container.innerHTML = `<img src="${url}" alt="Product Image" class="main-image" id="mainImage" />
          <div class="zoom-lens" id="zoomLens"></div>
          <div class="zoom-hint">Hover to zoom</div>`;
        
        document.querySelectorAll(".thumbnail").forEach((thumb) =>
          thumb.classList.remove("active")
        );
        event.target.classList.add("active");
        
        initializeZoom();
      }

      function initializeZoom() {
        const container = document.getElementById('mainImageContainer');
        const lens = document.getElementById('zoomLens');
        const mainImage = document.getElementById('mainImage');
        
        if (!container || !lens || !mainImage) return;

        const ZOOM_FACTOR = 2.5; 
        const LENS_SIZE = 200; 
        
        const setupZoom = () => {
          const imageUrl = mainImage.src;
          const containerRect = container.getBoundingClientRect();
          const imageRect = mainImage.getBoundingClientRect();
          
          lens.style.setProperty('--zoom-image', `url(${imageUrl})`);
          
          const bgWidth = imageRect.width * ZOOM_FACTOR;
          const bgHeight = imageRect.height * ZOOM_FACTOR;
          lens.style.backgroundSize = `${bgWidth}px ${bgHeight}px`;
          
          container.addEventListener('mousemove', function(e) {
            const rect = container.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            lens.style.left = e.clientX + 'px';
            lens.style.top = e.clientY + 'px';
            
            const bgX = -(x * ZOOM_FACTOR - LENS_SIZE / 2);
            const bgY = -(y * ZOOM_FACTOR - LENS_SIZE / 2);
            
            lens.style.backgroundPosition = `${bgX}px ${bgY}px`;
          });

          container.addEventListener('mouseleave', function() {
            lens.style.opacity = '0';
          });

          container.addEventListener('mouseenter', function() {
            lens.style.opacity = '1';
          });
        };

        if (mainImage.complete) {
          setupZoom();
        } else {
          mainImage.addEventListener('load', setupZoom);
        }
      }

      async function addToCart(productId) {
        const isLoggedIn = <%= user ? 'true' : 'false' %>;
                
        if (!isLoggedIn) {
          Swal.fire({
            title: 'Please Login',
            text: 'Please login to add product to Cart',
            icon: 'warning',
            confirmButtonText: 'Login',
            showCancelButton: true,
            cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/login";
            }
          });
          return;
        }

        try {
          const ram = selectedRAM;
          const storage = selectedStorage;
          console.log("selectedRAM", selectedRAM)
          const price = document.getElementById("salePriceValue").value;
          const response = await fetch("/cart/add-to-cart", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ productId, ram, storage, price }),
          });

          const result = await response.json();
          if (response.ok && result.success === true) {
            const cartBadges = document.querySelectorAll('.cart-badge');
            cartBadges.forEach(badge => {
              if(typeof result.count === 'number' && result.count >= 0){
                  badge.innerText = result.count;
                  if (result.count > 0) {
                       badge.classList.remove('d-none');
                  } else {
                       badge.classList.add('d-none');
                  }
              }
            });
              
            iziToast.success({
              title: "Success",
              message: result.message || "Product added to cart",
              position: "bottomRight",
              timeout: 2000,
            });
          } else {
            iziToast.warning({
              title: "Notice",
              message: result.message || "Could not add to cart",
              position: "bottomRight",
              timeout: 2000,
            });
          }
        } catch (error) {
          console.error("Error:", error);
          iziToast.error({
            title: "Error",
            message: "An error occurred while adding to cart",
            position: "bottomRight",
            timeout: 2000,
          });
        }
      }

      function addToWishlist(productId, icon) {
        const isLoggedIn = <%= user ? 'true' : 'false' %>;
                
        if (!isLoggedIn) {
          Swal.fire({
            title: 'Please Login',
            text: 'Please login to add product to Wishlist',
            icon: 'warning',
            confirmButtonText: 'Login',
            showCancelButton: true,
            cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/login";
            }
          });
          return;
        }

        fetch("/wishlist/toggle", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ productId }),
        })
          .then((response) => response.json())
          .then((result) => {
            if (result.success) {
              const wishlistBadges = document.querySelectorAll('.wishlist-badge');
              wishlistBadges.forEach(badge => {
                if(typeof result.count === 'number' && result.count >= 0){
                    badge.innerText = result.count;
                    if (result.count > 0) {
                         badge.classList.remove('d-none');
                        } else {
                             badge.classList.add('d-none');
                        }
                }
              });
              
              if (result.action === "added") {
                iziToast.success({
                  title: "",
                  message: "Product added to Wishlist",
                  position: "bottomRight",
                  timeout: 2000,
                });
                icon.classList.remove("bi-heart");
                icon.classList.add("bi-heart-fill");
              } else {
                iziToast.success({
                  title: "",
                  message: "Product removed from Wishlist",
                  position: "bottomRight",
                  timeout: 2000,
                });
                icon.classList.remove("bi-heart-fill");
                icon.classList.add("bi-heart");
              }
            } else {
              Swal.fire({
                title: 'Please Login',
                text: 'Please login to manage your wishlist',
                icon: 'warning',
                confirmButtonText: 'Login',
                showCancelButton: true,
                cancelButtonText: 'Cancel'
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = "/login";
                }
              });
            }
          })
          .catch((error) => {
            console.error("Error toggling wishlist:", error);
            iziToast.error({
              title: "Error",
              message: "Something went wrong.",
              position: "bottomRight",
              timeout: 2000,
            });
          });
      }

      const productName = "<%= product.name %>";
      function generateBreadcrumb() {
        const breadcrumbContainer = document.getElementById("breadcrumb");
        const pathArray = window.location.pathname.split("/").filter((p) => p);
        const isID = (segment) =>
          /^[0-9a-fA-F]{24}$/.test(segment) || /^\d+$/.test(segment);
        let breadcrumbHTML = `<a href="/">Home</a>`;
        let fullPath = "";
        
        pathArray.forEach((segment, index) => {
          const isLast = index === pathArray.length - 1;
          const nextIsID = isLast ? false : isID(pathArray[index + 1]);
          if (isID(segment)) return;
          fullPath += `/${segment}`;
          if (nextIsID || isLast) {
            const label = segment.toLowerCase() === "product" ? productName : decodeURIComponent(segment);
            breadcrumbHTML += ` <span>›</span> <span>${label}</span>`;
          } else {
            breadcrumbHTML += ` <span>›</span> <a href="${fullPath}">${decodeURIComponent(segment)}</a>`;
          }
        });
        breadcrumbContainer.innerHTML = breadcrumbHTML;
      }

      document.addEventListener("DOMContentLoaded", () => {
        generateBreadcrumb();
         
        document.querySelectorAll('#ram-options .variant-btn').forEach(btn => {
          btn.addEventListener('click', () => selectRAM(btn.dataset.ram));
        });
        document.querySelectorAll('#storage-options .variant-btn').forEach(btn => {
          btn.addEventListener('click', () => selectStorage(btn.dataset.storage));
        });
        
        const firstInStockVariant = variants.find(v => v.stock > 0);
        if (firstInStockVariant) {
          selectRAM(firstInStockVariant.RAM);
          selectStorage(firstInStockVariant.Storage);
        }
        
        initializeZoom();
      });
    </script>
</body>
</html>
