<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= product.name %> - LapZone</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet"/>
    <link rel="stylesheet" href="/css/header.css" />
    <link rel="stylesheet" href="/css/productPage.css" />
    <link rel="stylesheet" href="/css/universal-floating-elements.css" />
    <script src="https://unpkg.com/js-image-zoom@0.4.1/js-image-zoom.js" type="application/javascript" ></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css" />
    <link rel="stylesheet" href="/css/izitoast-styles.css" />
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <style>
      .action-buttons {
        display: flex;
        flex-direction: row;
        gap: 1rem;
        margin-top: 1rem;
        width: 100%;
      }

      .product-title-section {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
      }

      .add-to-cart-btn,
      .buy-now-btn {
        flex: 1;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s, transform 0.2s;
      }

      .add-to-cart-btn {
        background: #1e40af;
        /* --primary-color */
        color: #fff;
      }

      .add-to-cart-btn:hover {
        background: #3b82f6;
        /* --secondary-color */
        transform: translateY(-2px);
      }

      .buy-now-btn {
        background: #10b981;
        /* Green for Buy Now */
        color: #fff;
      }

      .buy-now-btn:hover {
        background: #059669;
        transform: translateY(-2px);
      }

      .add-to-cart-btn i,
      .buy-now-btn i {
        margin-left: 0.5rem;
        font-size: 1rem;
      }

      /* Styles for wishlist icon */
      .wishlist-icon-container {
        display: flex;
        justify-content: center;
        margin-top: 0.5rem;
      }

      .wishlist-icon {
        font-size: 1.75rem;
        color: #dc2626;
        /* red */
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 8px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.8);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .wishlist-icon:hover {
        color: #b91c1c;
        /* darker red */
        transform: scale(1.1);
        background-color: rgba(255, 255, 255, 1);
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
      }
      .variant-btn.active {
        background-color: #5d7fee;
        border: 2px solid #7778b1;
        color: black;
      }
      #dynamicPrice {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e40af;
        
      }
      .variant-btn.disabled {
        background-color: #e5e7eb;
        color: #9ca3af;
        cursor: not-allowed;
        border-color: #d1d5db;
        pointer-events: none;
      }

      /* Fix overlap issue between 769px and 1199px */
      .product-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
        display: flex;
        gap: 2rem;
        flex-wrap: wrap;
        align-items: flex-start;
      }

      .product-images {
        flex: 1;
        min-width: 300px;
        max-width: 100%;
      }

      .product-details {
        flex: 1;
        min-width: 300px;
        max-width: 600px;
        padding: 1rem;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      /* Specific fixes for medium screen overlap */
      @media (min-width: 769px) and (max-width: 1199px) {
        .product-container {
          flex-direction: column;
          gap: 1.5rem;
          max-width: 900px;
        }
        
        .product-images {
          width: 100%;
          max-width: 100%;
          flex: none;
          display: flex;
          flex-direction: column;
          align-items: center;
        }
        
        #mainImageContainer {
          max-width: 500px;
          width: 100%;
        }
        
        .product-details {
          width: 100%;
          max-width: 100%;
          flex: none;
        }
        
        .d-flex.flex-wrap {
          justify-content: center;
          max-width: 500px;
          margin: 1rem auto 0;
        }
      }

      /* Ensure proper layout on larger screens */
      @media (min-width: 1200px) {
        .product-container {
          flex-direction: row;
          max-width: 1200px;
        }
        
        .product-images {
          flex: 1;
          max-width: 50%;
        }
        
        .product-details {
          flex: 1;
          max-width: 50%;
        }
      }

      /* Mobile layout */
      @media (max-width: 768px) {
        .product-container {
          flex-direction: column;
          padding: 0 0.5rem;
          gap: 1rem;
        }
        
        .product-images,
        .product-details {
          width: 100%;
          max-width: 100%;
          flex: none;
        }
      }
    </style>
  </head>

  <body>
    <div class="page-container">
      <%- include("../partials/user/header.ejs") %>

      <div class="product-container">
      <div class="product-images">
        <div id="mainImageContainer">
          <img src="<%= product.images.find(img => img.isMain)?.url || 'https://placehold.co/600x400' %>" alt="<%= product.name %>" class="main-image" id="mainImage" />
        </div>

        <div class="d-flex flex-wrap">
          <% product.images.forEach(img=> { %>
          <img src="<%= img.url %>" alt="<%= product.name %> thumbnail"   class="thumbnail <%= img.isMain ? 'active' : '' %>" onclick="changeImage('<%= img.url %>')" />
          <% }) %>
        </div>
      </div>

      <div class="product-details">
        <nav class="breadcrumb" id="breadcrumb"></nav>
        <div class="product-title-section">
          <h1><%= product.name %></h1>
          <div class="wishlist-icon-container d-flex">
            <i class="bi <%= isWishlisted ? 'bi-heart-fill' : 'bi-heart' %> wishlist-icon" onclick="addToWishlist('<%= product._id %>', this)"  title="Add to Wishlist" ></i>
          </div>
        </div>

        <% const productOffer = product.offer || 0; 
        const categoryOffer = product.categoryId?.offer || 0; 
        const finalOffer = Math.max(productOffer, categoryOffer); %> 
        
        <div class="price">
          <% if (finalOffer > 0) { %>
            <i class="bi bi-arrow-down-circle fs-5"></i>
            <span><%= finalOffer %>% OFF</span>
          <% } %>

          ₹<span id="dynamicPrice"><%= product.salePrice.toLocaleString('en-IN') %></span>

        <!-- <% if (product.regularPrice && product.salePrice < product.regularPrice) { %>
            <del>₹<%= product.regularPrice.toLocaleString('en-IN') %></del>
          <% }  %>  -->
        </div> 

        <div class="description">
            <%= product.description || 'No description available.' %>
          </div>
        <div class="offers">
          <ul>
            <% if (finalOffer && finalOffer> 0) { %>
            <li><%= finalOffer %>% off on this product!</li>
            <% } else { %>
            <li>No offers available.</li>
            <% } %>
          </ul>
        </div>
        <input type="hidden" id="salePriceValue" name="salePrice" value="<%= product.salePrice %>" />
         <% const available = product.variants.find(v => v.stock > 0) %>
        <div class="variant-selector">
          <div>RAM</div>
          <% const uniqueRAMs = [...new Set(product.variants.map(variant => variant.RAM))]; %>
          <div class="variant-options" id="ram-options">
            <% uniqueRAMs.forEach(ram => {
              const hasStock = product.variants.some(v => v.RAM === ram && v.stock > 0); %>
              <button class="variant-btn <%= !hasStock ? 'disabled' : '' %>" data-ram="<%= ram %>" onclick="<%= hasStock ? `selectRAM('${ram}', this)` : '' %>"
                <%= !hasStock ? 'disabled' : '' %>>
                <%= ram %>
              </button>
            <% }) %>

          </div>
          <div>Storage</div>
          <div class="variant-options" id="storage-options">
            <% const uniqueStorages = [...new Set(product.variants.map(variant => variant.Storage))]; %>
            <% uniqueStorages.forEach(storage => {
              const hasStock = product.variants.some(v => v.Storage === storage && v.stock > 0); %>
              <button
                class="variant-btn <%= !hasStock ? 'disabled' : '' %>"
                data-storage="<%= storage %>"
                onclick="<%= hasStock ? `selectStorage('${storage}', this)` : '' %>"
                <%= !hasStock ? 'disabled' : '' %>>
                <%= storage %>
              </button>
            <% }) %>

          </div>
        </div>

        <% if(!available){ %>
        <span class="stockout">Out of stock</span>
        <% }  %>

        <div class="action-buttons">
          <button class="add-to-cart-btn mt-0 btn btn-warning" <%= available ? '' : 'disabled' %> onclick="addToCart('<%= product._id %>')">Add to Cart <i class="bi bi-cart-plus"></i>
          </button>
        </div>
      </div>
    </div>

    <div class="container my-5 px-3 px-md-5">
      <div class="specifications">
        <h2>Specifications</h2>
        <dl>
          <% if (product.name) { %>
          <dt>Model Name</dt>
          <dd><%= product.name %></dd>
          <% } %> <% if (product.brand) { %>
          <dt>Brand</dt>
          <dd><%= product.brand %></dd>
          <% } %> <% if (product.modelNumber) { %>
          <dt>Model Number</dt>
          <dd><%= product.modelNumber %></dd>
          <% } %> <% if (product.category) { %>
          <dt>Category</dt>
          <dd><%= product.category %></dd>
          <% } %> <% if (product.color) { %>
          <dt>Colour</dt>
          <dd><%= product.color %></dd>
          <% } %> <% if (product.CPU) { %>
          <dt>Processor</dt>
          <dd><%= product.CPU %></dd>
          <% } %> <% if (product.OS) { %>
          <dt>Operating System</dt>
          <dd><%= product.OS %></dd>
          <% } %> <% if (product.screen) { %>
          <dt>Display</dt>
          <dd><%= product.screen %></dd>
          <% } %> <% if (product.webcam) { %>
          <dt>Web Camera</dt>
          <dd><%= product.webcam %></dd>
          <% } %> <% if (product.ports && product.ports.length> 0) { %> <%
          product.ports.forEach(portEntry=> { %> <% if (portEntry['USB Type-A'])
          { %>
          <dt>USB Type-A</dt>
          <dd><%= portEntry['USB Type-A'] %></dd>
          <% } %> <% if (portEntry['USB Type-C']) { %>
          <dt>USB Type-C</dt>
          <dd><%= portEntry['USB Type-C'] %></dd>
          <% } %> <% if (portEntry['HDMI']) { %>
          <dt>HDMI</dt>
          <dd><%= portEntry['HDMI'] %></dd>
          <% } %> <% if (portEntry['AudioJack']) { %>
          <dt>Audio Jack</dt>
          <dd><%= portEntry['AudioJack'] %></dd>
          <% } %> <% if (portEntry['LAN']) { %>
          <dt>LAN</dt>
          <dd><%= portEntry['LAN'] %></dd>
          <% } %> <% if (portEntry['Card Reader']) { %>
          <dt>Card Reader</dt>
          <dd><%= portEntry['Card Reader'] %></dd>
          <% } %> <% }) %> <% } %> <% if (product.warranty) { %>
          <dt>Warranty</dt>
          <dd><%= product.warranty %></dd>
          <% } %>
        </dl>
      </div>
    </div>
    
    <section class="suggestions">
      <h1>Suggestions</h1>
      <div class="suggestions-grid">
        <% productSuggesions.forEach(suggestion=> { const mainImage =
        suggestion.images.find(img => img.isMain); const variant =
        suggestion.variants?.[0]; %>
        <div class="suggestion">
          <a href="/products/<%= suggestion._id %>">
            <img src="<%= mainImage?.url || '/default-image.jpg' %>" alt="<%= suggestion.name %>" />
            <div class="card-body">
              <h5><%= suggestion.name %></h5>
              <p class="card-text">
                <%= suggestion.description.substring(0, 100) %>...
              </p>
            </div>
            <div class="card-footer">₹<%= suggestion.salePrice || 'N/A' %></div>
          </a>
        </div>
        <% }); %>
      </div>
    </section>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"></script>
    <script>
      const basePrice = <%= product.salePrice %>;
      const variants = <%- JSON.stringify(product.variants) %>;
      const finalOffer = <%= Math.max(product.offer || 0, product.categoryId?.offer || 0) %>;
      const finalOfferedPrice = Math.round((basePrice * finalOffer / 100));

      let selectedRAM = null;
      let selectedStorage = null;
      function highlightButton(containerId, value, attr) {
        document.querySelectorAll(`#${containerId} .variant-btn`).forEach(btn => {
          btn.classList.remove('active');
          if (btn.dataset[attr] === value) {
            btn.classList.add('active');
          }
        });
      }

      function selectRAM(ram) {
        selectedRAM = ram;
        highlightButton('ram-options', ram, 'ram');

        const match = variants.find(v => v.RAM === ram);
        if (match) {
          selectedStorage = match.Storage;
          highlightButton('storage-options', selectedStorage, 'storage');
        }

        updatePrice();
      }

      function selectStorage(storage) {
        selectedStorage = storage;
        highlightButton('storage-options', storage, 'storage');

        const match = variants.find(v => v.Storage === storage);
        if (match) {
          selectedRAM = match.RAM;
          highlightButton('ram-options', selectedRAM, 'ram');
        }

        updatePrice();
      }

    function updatePrice() {
      const priceEl = document.getElementById("dynamicPrice");
      const hiddenInput = document.getElementById("salePriceValue");

      if (!priceEl || !hiddenInput) return; 

      if (selectedRAM && selectedStorage) {
        const variant = variants.find(v => v.RAM === selectedRAM && v.Storage === selectedStorage);
        if (variant) {
          const priceBeforeDiscount = basePrice + (variant.priceAdjustment || 0);
          const finalPrice = Math.round(priceBeforeDiscount * (1 - finalOffer / 100))
          priceEl.textContent = finalPrice.toLocaleString("en-IN");
          hiddenInput.value = finalPrice;
          return;
        }
      }

      priceEl.textContent = basePrice.toLocaleString("en-IN");
      hiddenInput.value = basePrice;
    }

      let options = {
        width: 570,
        zoomWidth: 350,
        offset: { vertical: 0, horizontal: 10 },
        zoomStyle: "z-index: 1000;",
      };

      new ImageZoom(document.getElementById("mainImageContainer"), options);

      function changeImage(url) {
        const container = document.getElementById("mainImageContainer");

        container.innerHTML = `<img src="${url}" alt="Product Image" class="main-image" id="mainImage" />`;

        document.querySelectorAll(".thumbnail").forEach((thumb) =>
          thumb.classList.remove("active")
        );
        event.target.classList.add("active");

        const options = {
          width: 570,
          zoomWidth: 350,
          offset: { vertical: 0, horizontal: 10 },
          zoomStyle: "z-index: 1000;",
        };

        new ImageZoom(container, options);
      }


      async function addToCart(productId) {
        try {
          const ram = selectedRAM;
          const storage =selectedStorage;
          console.log("selectedRAM",selectedRAM)
          const price = document.getElementById("salePriceValue").value;
          const response = await fetch("/cart/add-to-cart", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ productId, ram, storage, price,
             }),
          });

          const result = await response.json();

          if (response.ok && result.success === true) {
            const cartBadge = document.querySelector('.cart-badge')
              if(typeof result.count === 'number' && result.count >= 0){
                  cartBadge.innerText = result.count;
                  if (result.count > 0) {
                       cartBadge.classList.remove('d-none');
                  } else {
                       cartBadge.classList.add('d-none');
                  }
              }
              iziToast.success({
                title: "Success",
                message: result.message || "Product added to cart",
                position: "bottomRight",
                timeout: 2000,
              });
          } else {
              iziToast.warning({
                title: "Notice",
                message: result.message || "Could not add to cart",
                position: "bottomRight",
                timeout: 2000,
              });
            }
        } catch (error) {
          console.error("Error:", error);
          iziToast.error({
            title: "Error",
            message: "An error occurred while adding to cart",
            position: "bottomRight",
            timeout: 2000,
          });
        }
      }

      function addToWishlist(productId, icon) {
        fetch("/wishlist/toggle", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ productId }),
        })
          .then((response) => response.json())
          .then((result) => {
            if (result.success) {
              const badgeCount = document.querySelector('.wishlist-badge')
              if(typeof result.count === 'number' && result.count >= 0){
                  badgeCount.innerText = result.count;
                  if (result.count > 0) {
                       badgeCount.classList.remove('d-none');
                      } else {
                           badgeCount.classList.add('d-none');
                      }
              }
              if (result.action === "added") {
                iziToast.success({
                  title: "",
                  message: "Product added to Wishlist",
                  position: "bottomRight",
                  timeout: 2000,
                });
                icon.classList.remove("bi-heart");
                icon.classList.add("bi-heart-fill");
              } else {
                iziToast.success({
                  title: "",
                  message: "Product removed from Wishlist",
                  position: "bottomRight",
                  timeout: 2000,
                });
                icon.classList.remove("bi-heart-fill");
                icon.classList.add("bi-heart");
              }
            } else {
              window.location.href = "/login";
            }
          })
          .catch((error) => {
            console.error("Error toggling wishlist:", error);
            iziToast.error({
              title: "Error",
              message: "Something went wrong.",
              position: "bottomRight",
              timeout: 2000,
            });
          });
      }

      const productName = "<%= product.name %>";

      function generateBreadcrumb() {
        const breadcrumbContainer = document.getElementById("breadcrumb");
        const pathArray = window.location.pathname.split("/").filter((p) => p);

        const isID = (segment) =>
          /^[0-9a-fA-F]{24}$/.test(segment) || /^\d+$/.test(segment);

        let breadcrumbHTML = `<a href="/">Home</a>`;
        let fullPath = "";

        pathArray.forEach((segment, index) => {
          const isLast = index === pathArray.length - 1;
          const nextIsID = isLast ? false : isID(pathArray[index + 1]);

          if (isID(segment)) return;

          fullPath += `/${segment}`;

          if (nextIsID || isLast) {
            const label =segment.toLowerCase() === "product" ? productName : decodeURIComponent(segment);
            breadcrumbHTML += ` <span>›</span> <span>${label}</span>`;
          } else {
            breadcrumbHTML += ` <span>›</span> <a href="${fullPath}">${decodeURIComponent(
              segment
            )}</a>`;
          }
        });

        breadcrumbContainer.innerHTML = breadcrumbHTML;
      }

      document.addEventListener("DOMContentLoaded", () => {
        generateBreadcrumb(); 

        document.querySelectorAll('#ram-options .variant-btn').forEach(btn => {
          btn.addEventListener('click', () => selectRAM(btn.dataset.ram));
        });

        document.querySelectorAll('#storage-options .variant-btn').forEach(btn => {
          btn.addEventListener('click', () => selectStorage(btn.dataset.storage));
        });

        const firstInStockVariant = variants.find(v => v.stock > 0);
          if (firstInStockVariant) {
            selectRAM(firstInStockVariant.RAM);
            selectStorage(firstInStockVariant.Storage);
          }
      })
    </script>
  </body>
</html>